{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Textile documentation. Whether you are an expert or an absolute beginner, you'll find your answers here. Pick a starting point below, or use the search box to find documents matching your keywords. Textile is designed to connect and extend Libp2p , IPFS , and Filecoin . Below, you'll find the three technologies that makeup Textile: the Hub, ThreadsDB, and the Powergate. Together, these tools should help you build apps that are only limited by your imagination! The Hub \u00b6 The Hub is a portal to the IPFS network. Use Textile's managed services to persist your data on the IPFS network, enhance the speed and availability of your decentralized databases, and more. The Hub has APIs for developers and teams to push data to the network and it has developer libraries to provide remote IPFS pinning in your apps or simplify the deployment of our decentralized database, ThreadsDB. Start building \u00b6 Introduction Learn more about using the Textile Hub. Buckets Persist your data on remote IPFS peers. App APIs Use Threads & Buckets to persist data on IPFS from your apps. ThreadsDB \u00b6 ThreadsDB is a secure, decentralized, p2p database built on IFPS and Libp2p. Developers use ThreadsDB so they can spend less time configuring encryption or managing content addresses, instead ThreadsDB allows them to start building right away. A familiar MongoDB/Mongoose API and simple data hosting services make dynamic data on the DWeb easy! Learn more \u00b6 Introduction Learn about ThreadsDB and how to use them in your app. App APIs Use the Hub to help persist and scale your user's databases. JavaScript Docs Start using the ThreadsDB in your NodeJS and browser apps. Start building \u00b6 JS Todo App Build a Todo app with Textile Thread pinning services. Go Chat App Build a multi-user chat app in Go. Filecoin Powergate \u00b6 The Powergate is just warming up! We are building an API driven solution to deploy hybrid Filecoin and IPFS storage into your app. If you are eager to learn more about what we are up to, we invite you to follow our bi-weekly community updates or follow along in the the open-source repo . Other Resources \u00b6 Join our public Slack , visit our GitHub , follow us on Twitter , and check out the Blog !","title":"Home"},{"location":"#the-hub","text":"The Hub is a portal to the IPFS network. Use Textile's managed services to persist your data on the IPFS network, enhance the speed and availability of your decentralized databases, and more. The Hub has APIs for developers and teams to push data to the network and it has developer libraries to provide remote IPFS pinning in your apps or simplify the deployment of our decentralized database, ThreadsDB.","title":"The Hub"},{"location":"#start-building","text":"","title":"Start building"},{"location":"#threadsdb","text":"ThreadsDB is a secure, decentralized, p2p database built on IFPS and Libp2p. Developers use ThreadsDB so they can spend less time configuring encryption or managing content addresses, instead ThreadsDB allows them to start building right away. A familiar MongoDB/Mongoose API and simple data hosting services make dynamic data on the DWeb easy!","title":"ThreadsDB"},{"location":"#learn-more","text":"","title":"Learn more"},{"location":"#start-building_1","text":"","title":"Start building"},{"location":"#filecoin-powergate","text":"The Powergate is just warming up! We are building an API driven solution to deploy hybrid Filecoin and IPFS storage into your app. If you are eager to learn more about what we are up to, we invite you to follow our bi-weekly community updates or follow along in the the open-source repo .","title":"Filecoin Powergate"},{"location":"#other-resources","text":"Join our public Slack , visit our GitHub , follow us on Twitter , and check out the Blog !","title":"Other Resources"},{"location":"a-tour-of-textile/","text":"Warning This section is still a work in progress. Libraries are under active development, and this material may not reflect the latest changes. Please view the primary code-repositories and look out for our release announcements soon. Welcome to Textile! This is a great place to start if you're a developer interested in using Textile's decentralized tooling in your mobile, desktop, or web applications. Introduction \u00b6 Textile is a set of tools to help you and your team build decentralized apps, fast. Textile is primarily built on IPFS and makes it easy for you or your application to store and distribute data over the IPFS network. Some features of Textile you may find useful include: Push files, directories, and websites to the IPFS network. Textile's Buckets are an intuitive way for you to host and manage data on IPFS. Buckets run on IPFS and Threads, but you don't have to remember content addresses to use them! Collaboratively update and manage Buckets with your team through simple collaborative projects and access control. Your organization can quickly host app assets or entire webpages on IPFS. Integration with CI tools makes this a breeze. Add decentralized databases to your web, mobile, or desktop application. Create databases on IPFS that are private for one user or shared with many. The Threads DB is an advanced decentralized database and networking protocol for IPFS. Other things about Textile and Threads you may like include their open source, MIT licenses, active developer support on our public Slack group , and a deep technical paper to get your neurons firing. Getting Started \u00b6 Textile is a command-line interface that gives you access to everything listed above and more. To get started, here's what you need to do Info Download Textile to your computer. You can find the latest release for on our GitHub releases page . Textile is built for all the common architectures used in Mac (Darwin), Windows, and Linux. If your architecture isn't listed, ping us on Slack and we can give you instructions to build a version ready for your system. Run Textile for the first time, the help command is a useful place to start. textile --help The Textile client. Usage: textile [ command ] Available Commands: buckets Manage project buckets help Help about any command init Init a new project login Login logout Logout projects Manage projects switch Switch teams or personal account teams Team management whoami Show user or team Teams and Projects \u00b6 To start using remote services such as IPFS pinning, Bucket sharing, and Thread APIs, you'll need an account on Textile. Textile provides a simple, password-less account setup. You can create a new account by logging in with your valid email address for the first time. Login \u00b6 textile login Enter your email: you@domain.app\u2588 > We sent an email to you@domain.app. Please follow the steps provided inside it. Go to your inbox and look for the verification email and follow the instructions inside. After complete, your terminal should output a confirmation: \u2714 Email confirmed > Success! You are now logged in. Initialize a new project directory with ` textile init ` . That's it, you can now start using Textile, IPFS, and Threads. Create a Team \u00b6 By default, you'll be on your own in Textile, you'll probably want to create (or join) a team before you start building. textile teams add <new team name> Switch to Team \u00b6 To use your new team, you need to use the switch command to select your newly created team. textile switch Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190 ? Switch to: \u25b8 you@domain.app ( current ) <new team name> Invite another member to your team \u00b6 textile teams invite Enter email to invite: other@domain.app\u2588 > Success! We sent other@domain.app an invitation to the new team. Join a team \u00b6 If someone else has already created a team for you to join, you'll receive an invite email. Simply follow the instructions in the email to join and use the new team. List your teams \u00b6 textile teams ls NAME ID <new team name> f62cdc2b-9404-40ed-8467-ea804fcc35f1 > Found 2 teams Create a Project \u00b6 Teams on Textile may create different Projects. Projects are useful to organize resources or user groups in your app. Creating a new one is simple. First, navigate to the directory where you'd like to build your project, mkdir txtl-project cd txtl-project/ Next, tell Textile to create a project in this directory. Similar to Git, Textile will create a simple config file in this directly under, .textile/config.yaml . textile projects init my-new-project > Success! Initialized empty project in /Users/me/txtl-project/.textile Because you are have switched to your team, this project should now be available to other members of your team also. Host data in Buckets \u00b6 Textile includes a textile buckets tool that makes it simple for you to pin files to IFPS. The files you pin can be used as part or all of the interface to your dApp. You can think of buckets much like you might already think of buckets on S3 (or if you aren't familiar, just think of them as folders). As an extra bonus, if any bucket you create contains an index.html file, Textile will host the bucket as a web site at https://<bucket-name>.textile.cafe . Read on to see an example. Push files \u00b6 To start pinning files in your Textile project, use the push sub command. You can push a single file to a bucket or an entire directory, in which case all contained files and directories are pushed recursively. All paths will be created if they don't exist and you can use push repeatedly to keep adding more files to a bucket. Here, we push files for a static web site to a bucket called aaron : textile buckets push public/* aaron Add 44 files? Press ENTER to confirm: \u2588 > Pushing mySite/public/404/index.html to aaron/404/index.html 9 .87 kB / 9 .87 kB [ -------------------------------- ] 100 .00% 78 .69 kB p/s 0s > Pushing mySite/public/404.html to aaron/404.html 9 .88 kB / 9 .88 kB [ -------------------------------- ] 100 .00% 260 .14 kB p/s 1s > Pushing mySite/public/app-b1262bbd5ce4afcb17ea.js to aaron/app-b1262bbd5ce4afcb17ea.js 98 .14 kB / 98 .14 kB [ -------------------------------- ] 100 .00% 307 .59 kB p/s 0s > Pushing mySite/public/app-b1262bbd5ce4afcb17ea.js.map to aaron/app-b1262bbd5ce4afcb17ea.js.map 390 .09 kB / 390 .09 kB [ -------------------------------- ] 100 .00% 376 .47 kB p/s 1s > Pushing mySite/public/chunk-map.json to aaron/chunk-map.json ... > Success! Pushed 44 files to aaron Inspecting a bucket \u00b6 You can list the files in a bucket or at any depth in the bucket, similar to listing files locally on your computer: textile buckets ls aaron/icons NAME SIZE DIR ITEMS PATH icon-144x144.png 9130 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-144x144.png icon-192x192.png 12422 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-192x192.png icon-256x256.png 16837 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-256x256.png icon-384x384.png 29004 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-384x384.png icon-48x48.png 2813 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-48x48.png icon-512x512.png 22446 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-512x512.png icon-72x72.png 4425 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-72x72.png icon-96x96.png 5926 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-96x96.png > Found 8 items Pulling files \u00b6 Use the buckets pull command to download files from a bucket to your computer. You can pull an entire bucket, a sub tree of a bucket, or a single file. textile buckets pull aaron/icons/icon-512x512.png ./ > Pulling aaron/icons/icon-512x512.png to icon-512x512.png 22 .45 kB / 22 .45 kB [ -------------------------------- ] 100 .00% 818 .35 kB p/s 0s > Success! Pulled 1 files to ./ Removing files \u00b6 The buckets rm command is used to remove files or directories from a bucket. Once a bucket is empty, the root bucket directory is deleted and will no longer appear in the list of buckets output from textile buckets ls . textile buckets rm aaron/aaron.txt > Success! Removed aaron/aaron.txt Accessing on cloud.textile.io \u00b6 You can access the latest version of the files in your bucket (without needing to know any CID!) at https://cloud.textile.io/dashboard/<project name>/<bucket name> . Of course since the data is all stored in IPFS, it's also available over https://gateway.ipfs.io/ipfs/<CID> . The CID for any Textile bucket or bucket sub directory is listed at the top of the corresponding cloud.textile.io/dahsboard page and in the output from textile buckets ls . Hosting web sites in Buckets \u00b6 Any bucket that contains an index.html file will be hosted as a web site at https://<bucket-name>.textile.cafe . In the textile buckets push example above, we pushed files that make up a static web site to a bucket named aaron . That web site is automatically available (with TLS!) at https://aaron.textile.cafe . Read more about hosting websites in Buckets here . Updating Buckets with CI \u00b6 Buckets can be managed as part of your CI workflows. Read more about updating your Buckets in CI here . A Decentralized Database \u00b6 A scalable, secure, multi-user, database for developers Want simple Filebase or MongoDB type functionality in your app? Textile provides Threads - A decentralized database built on IPFS. Threads give your app a way to store private data for one user or synchronize data across many peers. For a deep dive over breakfast, read the Threads Whitepaper . For now, here's a quick tour. The Threads Whitepaper outlines a number of new innovations, some highlights include: Standardized key management for securing data created in your apps An easy interface to create and update models (think MongoDB) A simple way for data owners to invite new members to their database Technically, Each thread contains a store (where data is kept) and models (the data structures you store and update). Threads are collaborative, for one to many users. By default, each thread your app creates for a user is private (fully encrypted) but can then be shared with other users who can then have access to just read or read & write to the same Thread. Data is transferred over IPFS, but it is encrypted by keys only available to people invited to the thread. If you would like to start testing Threads v2 you can use any of the following libraries. Name Status Platforms Description Implementations go-threads Threads reference implementation. js-threads Work in Progress. JavaScript implementation. Clients js-threads-client A JavaScript client for the threads daemon. dart-threads-client A Dart client for the threads daemon. Examples go-foldersync An e2e demo to sync data between two golang clients. js-foldersync A demo of writing and reading models with the js-threads-client. Planned andoroid-threads-client An Android client for the threads daemon. ios-threads-client An iOS client for the threads daemon. Hosted Threads \u00b6 The easiest way to get started with Threads is through Textile's hosted service. In this case, Threads can leverage your team's Textile resources (buckets, pinning, and networking). First, you'll need to create a Textile app token using the textile CLI. Create an app token \u00b6 App tokens allow you to access Textile resources from within apps you build. You can create new app tokens in your project in just a few seconds. textile project tokens add > Selected ethden > Success! Added new token <your new token> Use the token in your app \u00b6 To use your token with your app, simply follow the instructions available in either of the Textile client libraries here (support for other languages and platfirms coming soon!): js-textile : a library to authenticate your textile app token and use dart-textile : a library to authenticate your textile app token and use dart-threads-client in your app. Voila, now you have an app running a Threads database over IPFS with Textile ensuring that database content is pinned to the network no matter when or if your users remain online. App example \u00b6 The best way to learn how to use Threads is by checkout out our todo list and folder sync example apps. Local debugging \u00b6 The preceding instructions have you set up to use Textile's hosted Threads server. Sometimes when developing with Threads, it can be helpful to use a local Threads server called threadsd instead. You can connect an app using any of the Threads client libraries to the local threadsd , and then use the threads shell to view models, data, and watch events as they change data in real-time. Install the daemon and shell \u00b6 Visit the threads releases page. https://github.com/textileio/go-threads/releases Download the latest release for your platform, Linux, Windows, or Mac (darwin). Install threadsd and threads (or the .exe s on Windows) application. Run the threadsd application without any parameters. tar -xzvf go-threads_v0.1.9_darwin-amd64.tar.gz x install-threads/ x install-threads/install x install-threads/threadsd x install-threads/LICENSE x install-threads/README.md x install-threads/threads cd install-threads/ ./install Moved ./threads to /usr/local/bin Moved ./threadsd to /usr/local/bin threadsd Welcome to Threads! Your peer ID is 12D3KooWFFCiJt6B8Dog9ECpt7KGfqxjUxNktzpTK4e4mzQ51WPG Note for MacOS: By default, MacOS will prevent threadsd from running. After trying and failing once, you'll have to visit System Preferences > Security & Privacy > General, choose to allow threadsd to run, and then run threadsd again. Update your project to use local daemon \u00b6 Updating your project to use the locally running threadsd is as simple as setting the dev flag in the Textile.API constructor. Here's an example in Javascript: import { API } from '@textile/textile' import { Client } from '@textile/threads-client' const api = new API ({ token : \"<textile project token>\" , deviceId : \"<user id>\" , dev : true // causes the below client to use the local threadsd }) await api . start () const threadsClient = new Client ( api . threadsConfig ) Use threads shell to monitor data updates \u00b6 Start up the threads shell which will connect to your local threadsd : threads Successfully connected. >>> You first need to specify a store id to operate on using the use command: >>> use <store id> Switched to <store id> >>> Note: You can find your store id by logging it or setting a breakpoint in your app when you create a Theads store. Another note: In reality, you'll want to keep track of store ids you app creates so you can access those stores at a later time. View all updates to the data in the current store using the listen command: >>> listen <enter> to cancel { \"ID\" : \"5389d030-22b4-4327-aed5-10ae1f1f14d8\" , \"files\" : [] , \"owner\" : \"myFolder\" } { \"ID\" : \"5389d030-22b4-4327-aed5-10ae1f1f14d8\" , \"files\" : [ { \"ID\" : \"25ea5bc5-cbef-4619-9380-9725388f873b\" , \"cid\" : \"\" , \"files\" : [] , \"isDirectory\" : false, \"name\" : \"filecoin.pdf\" } ] , \"owner\" : \"myFolder\" } Explore data using the modelFind and modelFindById commands. Filecoin \u00b6 We recently announced our initiative to build developer tools for Filecoin. Those tools will leverage and link into Threads v2 and the Textile CLI to give developers simple ways to leverage Filecoin. You can follow our Filecoin progress here .","title":"A tour of textile"},{"location":"a-tour-of-textile/#introduction","text":"Textile is a set of tools to help you and your team build decentralized apps, fast. Textile is primarily built on IPFS and makes it easy for you or your application to store and distribute data over the IPFS network. Some features of Textile you may find useful include: Push files, directories, and websites to the IPFS network. Textile's Buckets are an intuitive way for you to host and manage data on IPFS. Buckets run on IPFS and Threads, but you don't have to remember content addresses to use them! Collaboratively update and manage Buckets with your team through simple collaborative projects and access control. Your organization can quickly host app assets or entire webpages on IPFS. Integration with CI tools makes this a breeze. Add decentralized databases to your web, mobile, or desktop application. Create databases on IPFS that are private for one user or shared with many. The Threads DB is an advanced decentralized database and networking protocol for IPFS. Other things about Textile and Threads you may like include their open source, MIT licenses, active developer support on our public Slack group , and a deep technical paper to get your neurons firing.","title":"Introduction"},{"location":"a-tour-of-textile/#getting-started","text":"Textile is a command-line interface that gives you access to everything listed above and more. To get started, here's what you need to do Info Download Textile to your computer. You can find the latest release for on our GitHub releases page . Textile is built for all the common architectures used in Mac (Darwin), Windows, and Linux. If your architecture isn't listed, ping us on Slack and we can give you instructions to build a version ready for your system. Run Textile for the first time, the help command is a useful place to start. textile --help The Textile client. Usage: textile [ command ] Available Commands: buckets Manage project buckets help Help about any command init Init a new project login Login logout Logout projects Manage projects switch Switch teams or personal account teams Team management whoami Show user or team","title":"Getting Started"},{"location":"a-tour-of-textile/#teams-and-projects","text":"To start using remote services such as IPFS pinning, Bucket sharing, and Thread APIs, you'll need an account on Textile. Textile provides a simple, password-less account setup. You can create a new account by logging in with your valid email address for the first time.","title":"Teams and Projects"},{"location":"a-tour-of-textile/#login","text":"textile login Enter your email: you@domain.app\u2588 > We sent an email to you@domain.app. Please follow the steps provided inside it. Go to your inbox and look for the verification email and follow the instructions inside. After complete, your terminal should output a confirmation: \u2714 Email confirmed > Success! You are now logged in. Initialize a new project directory with ` textile init ` . That's it, you can now start using Textile, IPFS, and Threads.","title":"Login"},{"location":"a-tour-of-textile/#create-a-team","text":"By default, you'll be on your own in Textile, you'll probably want to create (or join) a team before you start building. textile teams add <new team name>","title":"Create a Team"},{"location":"a-tour-of-textile/#switch-to-team","text":"To use your new team, you need to use the switch command to select your newly created team. textile switch Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190 ? Switch to: \u25b8 you@domain.app ( current ) <new team name>","title":"Switch to Team"},{"location":"a-tour-of-textile/#invite-another-member-to-your-team","text":"textile teams invite Enter email to invite: other@domain.app\u2588 > Success! We sent other@domain.app an invitation to the new team.","title":"Invite another member to your team"},{"location":"a-tour-of-textile/#join-a-team","text":"If someone else has already created a team for you to join, you'll receive an invite email. Simply follow the instructions in the email to join and use the new team.","title":"Join a team"},{"location":"a-tour-of-textile/#list-your-teams","text":"textile teams ls NAME ID <new team name> f62cdc2b-9404-40ed-8467-ea804fcc35f1 > Found 2 teams","title":"List your teams"},{"location":"a-tour-of-textile/#create-a-project","text":"Teams on Textile may create different Projects. Projects are useful to organize resources or user groups in your app. Creating a new one is simple. First, navigate to the directory where you'd like to build your project, mkdir txtl-project cd txtl-project/ Next, tell Textile to create a project in this directory. Similar to Git, Textile will create a simple config file in this directly under, .textile/config.yaml . textile projects init my-new-project > Success! Initialized empty project in /Users/me/txtl-project/.textile Because you are have switched to your team, this project should now be available to other members of your team also.","title":"Create a Project"},{"location":"a-tour-of-textile/#host-data-in-buckets","text":"Textile includes a textile buckets tool that makes it simple for you to pin files to IFPS. The files you pin can be used as part or all of the interface to your dApp. You can think of buckets much like you might already think of buckets on S3 (or if you aren't familiar, just think of them as folders). As an extra bonus, if any bucket you create contains an index.html file, Textile will host the bucket as a web site at https://<bucket-name>.textile.cafe . Read on to see an example.","title":"Host data in Buckets"},{"location":"a-tour-of-textile/#push-files","text":"To start pinning files in your Textile project, use the push sub command. You can push a single file to a bucket or an entire directory, in which case all contained files and directories are pushed recursively. All paths will be created if they don't exist and you can use push repeatedly to keep adding more files to a bucket. Here, we push files for a static web site to a bucket called aaron : textile buckets push public/* aaron Add 44 files? Press ENTER to confirm: \u2588 > Pushing mySite/public/404/index.html to aaron/404/index.html 9 .87 kB / 9 .87 kB [ -------------------------------- ] 100 .00% 78 .69 kB p/s 0s > Pushing mySite/public/404.html to aaron/404.html 9 .88 kB / 9 .88 kB [ -------------------------------- ] 100 .00% 260 .14 kB p/s 1s > Pushing mySite/public/app-b1262bbd5ce4afcb17ea.js to aaron/app-b1262bbd5ce4afcb17ea.js 98 .14 kB / 98 .14 kB [ -------------------------------- ] 100 .00% 307 .59 kB p/s 0s > Pushing mySite/public/app-b1262bbd5ce4afcb17ea.js.map to aaron/app-b1262bbd5ce4afcb17ea.js.map 390 .09 kB / 390 .09 kB [ -------------------------------- ] 100 .00% 376 .47 kB p/s 1s > Pushing mySite/public/chunk-map.json to aaron/chunk-map.json ... > Success! Pushed 44 files to aaron","title":"Push files"},{"location":"a-tour-of-textile/#inspecting-a-bucket","text":"You can list the files in a bucket or at any depth in the bucket, similar to listing files locally on your computer: textile buckets ls aaron/icons NAME SIZE DIR ITEMS PATH icon-144x144.png 9130 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-144x144.png icon-192x192.png 12422 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-192x192.png icon-256x256.png 16837 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-256x256.png icon-384x384.png 29004 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-384x384.png icon-48x48.png 2813 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-48x48.png icon-512x512.png 22446 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-512x512.png icon-72x72.png 4425 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-72x72.png icon-96x96.png 5926 false n/a /ipfs/QmSe8nSJsAW7eJXvMP5gYM6TCkuyJKeU8MusHs2kVBdFMZ/icons/icon-96x96.png > Found 8 items","title":"Inspecting a bucket"},{"location":"a-tour-of-textile/#pulling-files","text":"Use the buckets pull command to download files from a bucket to your computer. You can pull an entire bucket, a sub tree of a bucket, or a single file. textile buckets pull aaron/icons/icon-512x512.png ./ > Pulling aaron/icons/icon-512x512.png to icon-512x512.png 22 .45 kB / 22 .45 kB [ -------------------------------- ] 100 .00% 818 .35 kB p/s 0s > Success! Pulled 1 files to ./","title":"Pulling files"},{"location":"a-tour-of-textile/#removing-files","text":"The buckets rm command is used to remove files or directories from a bucket. Once a bucket is empty, the root bucket directory is deleted and will no longer appear in the list of buckets output from textile buckets ls . textile buckets rm aaron/aaron.txt > Success! Removed aaron/aaron.txt","title":"Removing files"},{"location":"a-tour-of-textile/#accessing-on-cloudtextileio","text":"You can access the latest version of the files in your bucket (without needing to know any CID!) at https://cloud.textile.io/dashboard/<project name>/<bucket name> . Of course since the data is all stored in IPFS, it's also available over https://gateway.ipfs.io/ipfs/<CID> . The CID for any Textile bucket or bucket sub directory is listed at the top of the corresponding cloud.textile.io/dahsboard page and in the output from textile buckets ls .","title":"Accessing on cloud.textile.io"},{"location":"a-tour-of-textile/#hosting-web-sites-in-buckets","text":"Any bucket that contains an index.html file will be hosted as a web site at https://<bucket-name>.textile.cafe . In the textile buckets push example above, we pushed files that make up a static web site to a bucket named aaron . That web site is automatically available (with TLS!) at https://aaron.textile.cafe . Read more about hosting websites in Buckets here .","title":"Hosting web sites in Buckets"},{"location":"a-tour-of-textile/#updating-buckets-with-ci","text":"Buckets can be managed as part of your CI workflows. Read more about updating your Buckets in CI here .","title":"Updating Buckets with CI"},{"location":"a-tour-of-textile/#a-decentralized-database","text":"A scalable, secure, multi-user, database for developers Want simple Filebase or MongoDB type functionality in your app? Textile provides Threads - A decentralized database built on IPFS. Threads give your app a way to store private data for one user or synchronize data across many peers. For a deep dive over breakfast, read the Threads Whitepaper . For now, here's a quick tour. The Threads Whitepaper outlines a number of new innovations, some highlights include: Standardized key management for securing data created in your apps An easy interface to create and update models (think MongoDB) A simple way for data owners to invite new members to their database Technically, Each thread contains a store (where data is kept) and models (the data structures you store and update). Threads are collaborative, for one to many users. By default, each thread your app creates for a user is private (fully encrypted) but can then be shared with other users who can then have access to just read or read & write to the same Thread. Data is transferred over IPFS, but it is encrypted by keys only available to people invited to the thread. If you would like to start testing Threads v2 you can use any of the following libraries. Name Status Platforms Description Implementations go-threads Threads reference implementation. js-threads Work in Progress. JavaScript implementation. Clients js-threads-client A JavaScript client for the threads daemon. dart-threads-client A Dart client for the threads daemon. Examples go-foldersync An e2e demo to sync data between two golang clients. js-foldersync A demo of writing and reading models with the js-threads-client. Planned andoroid-threads-client An Android client for the threads daemon. ios-threads-client An iOS client for the threads daemon.","title":"A Decentralized Database"},{"location":"a-tour-of-textile/#hosted-threads","text":"The easiest way to get started with Threads is through Textile's hosted service. In this case, Threads can leverage your team's Textile resources (buckets, pinning, and networking). First, you'll need to create a Textile app token using the textile CLI.","title":"Hosted Threads"},{"location":"a-tour-of-textile/#create-an-app-token","text":"App tokens allow you to access Textile resources from within apps you build. You can create new app tokens in your project in just a few seconds. textile project tokens add > Selected ethden > Success! Added new token <your new token>","title":"Create an app token"},{"location":"a-tour-of-textile/#use-the-token-in-your-app","text":"To use your token with your app, simply follow the instructions available in either of the Textile client libraries here (support for other languages and platfirms coming soon!): js-textile : a library to authenticate your textile app token and use dart-textile : a library to authenticate your textile app token and use dart-threads-client in your app. Voila, now you have an app running a Threads database over IPFS with Textile ensuring that database content is pinned to the network no matter when or if your users remain online.","title":"Use the token in your app"},{"location":"a-tour-of-textile/#app-example","text":"The best way to learn how to use Threads is by checkout out our todo list and folder sync example apps.","title":"App example"},{"location":"a-tour-of-textile/#local-debugging","text":"The preceding instructions have you set up to use Textile's hosted Threads server. Sometimes when developing with Threads, it can be helpful to use a local Threads server called threadsd instead. You can connect an app using any of the Threads client libraries to the local threadsd , and then use the threads shell to view models, data, and watch events as they change data in real-time.","title":"Local debugging"},{"location":"a-tour-of-textile/#install-the-daemon-and-shell","text":"Visit the threads releases page. https://github.com/textileio/go-threads/releases Download the latest release for your platform, Linux, Windows, or Mac (darwin). Install threadsd and threads (or the .exe s on Windows) application. Run the threadsd application without any parameters. tar -xzvf go-threads_v0.1.9_darwin-amd64.tar.gz x install-threads/ x install-threads/install x install-threads/threadsd x install-threads/LICENSE x install-threads/README.md x install-threads/threads cd install-threads/ ./install Moved ./threads to /usr/local/bin Moved ./threadsd to /usr/local/bin threadsd Welcome to Threads! Your peer ID is 12D3KooWFFCiJt6B8Dog9ECpt7KGfqxjUxNktzpTK4e4mzQ51WPG Note for MacOS: By default, MacOS will prevent threadsd from running. After trying and failing once, you'll have to visit System Preferences > Security & Privacy > General, choose to allow threadsd to run, and then run threadsd again.","title":"Install the daemon and shell"},{"location":"a-tour-of-textile/#update-your-project-to-use-local-daemon","text":"Updating your project to use the locally running threadsd is as simple as setting the dev flag in the Textile.API constructor. Here's an example in Javascript: import { API } from '@textile/textile' import { Client } from '@textile/threads-client' const api = new API ({ token : \"<textile project token>\" , deviceId : \"<user id>\" , dev : true // causes the below client to use the local threadsd }) await api . start () const threadsClient = new Client ( api . threadsConfig )","title":"Update your project to use local daemon"},{"location":"a-tour-of-textile/#use-threads-shell-to-monitor-data-updates","text":"Start up the threads shell which will connect to your local threadsd : threads Successfully connected. >>> You first need to specify a store id to operate on using the use command: >>> use <store id> Switched to <store id> >>> Note: You can find your store id by logging it or setting a breakpoint in your app when you create a Theads store. Another note: In reality, you'll want to keep track of store ids you app creates so you can access those stores at a later time. View all updates to the data in the current store using the listen command: >>> listen <enter> to cancel { \"ID\" : \"5389d030-22b4-4327-aed5-10ae1f1f14d8\" , \"files\" : [] , \"owner\" : \"myFolder\" } { \"ID\" : \"5389d030-22b4-4327-aed5-10ae1f1f14d8\" , \"files\" : [ { \"ID\" : \"25ea5bc5-cbef-4619-9380-9725388f873b\" , \"cid\" : \"\" , \"files\" : [] , \"isDirectory\" : false, \"name\" : \"filecoin.pdf\" } ] , \"owner\" : \"myFolder\" } Explore data using the modelFind and modelFindById commands.","title":"Use threads shell to monitor data updates"},{"location":"a-tour-of-textile/#filecoin","text":"We recently announced our initiative to build developer tools for Filecoin. Those tools will leverage and link into Threads v2 and the Textile CLI to give developers simple ways to leverage Filecoin. You can follow our Filecoin progress here .","title":"Filecoin"},{"location":"hub/accounts/","text":"Getting Started \u00b6 Installation \u00b6 To access and manage Hub resources, you need to install the Textile CLI. First, download the Textile CLI binary for your platform from the latest releases. Download \u00b6 Download the Textile CLI Latest Release . Install \u00b6 Open the contents of the downloaded archive and run the install script. This should install the tt tool on your computer. You can verify with tt --help . Mac Installation \u00b6 On MacOS you will need to confirm that it is okay to run the tt binary before it will run successfully. You will see this warning: Select 'Cancel' Go to 'System Settings' => 'General' where you will be able to click, 'Always Allow' Run tt --help again and this time select, 'Open` when promted. You will now be able to continue using the CLI without issue. When you update the binary, you may need to repeat the above steps. We will add developer signing to our MacOS binaries soon. Account setup \u00b6 Initialize \u00b6 To start using remote services such as IPFS pinning, Bucket sharing, and Thread APIs, you need an account on the Hub. Textile provides a simple, password-less account setup. You can create a new account and username with just an email address. tt init Whoami \u00b6 You can always verify that you have an active session on the Hub and that you are using the correct account by running the tt whoami command. Login \u00b6 If you've just initialized your account successfully, there is no need to login. However, if you are returning to the Hub and need to re-login, simply use the login command. tt login Organizations \u00b6 The Hub allows you to create organizations easily. Organizations can be one or many collaborators. Members of an Org have management access to the Buckets and App Keys created while in an Org's directory. Info You can create , invite , and leave organizations easily. Read more about all Org methods on the CLI docs . To learn more about sharing Buckets with an organization, read the intro on Organization Buckets . Enterprise users \u00b6 If you are interested in enterprise support from Textile, please email us at support@textile.io .","title":"Accounts"},{"location":"hub/accounts/#getting-started","text":"","title":"Getting Started"},{"location":"hub/accounts/#installation","text":"To access and manage Hub resources, you need to install the Textile CLI. First, download the Textile CLI binary for your platform from the latest releases.","title":"Installation"},{"location":"hub/accounts/#download","text":"Download the Textile CLI Latest Release .","title":"Download"},{"location":"hub/accounts/#install","text":"Open the contents of the downloaded archive and run the install script. This should install the tt tool on your computer. You can verify with tt --help .","title":"Install"},{"location":"hub/accounts/#mac-installation","text":"On MacOS you will need to confirm that it is okay to run the tt binary before it will run successfully. You will see this warning: Select 'Cancel' Go to 'System Settings' => 'General' where you will be able to click, 'Always Allow' Run tt --help again and this time select, 'Open` when promted. You will now be able to continue using the CLI without issue. When you update the binary, you may need to repeat the above steps. We will add developer signing to our MacOS binaries soon.","title":"Mac Installation"},{"location":"hub/accounts/#account-setup","text":"","title":"Account setup"},{"location":"hub/accounts/#initialize","text":"To start using remote services such as IPFS pinning, Bucket sharing, and Thread APIs, you need an account on the Hub. Textile provides a simple, password-less account setup. You can create a new account and username with just an email address. tt init","title":"Initialize"},{"location":"hub/accounts/#whoami","text":"You can always verify that you have an active session on the Hub and that you are using the correct account by running the tt whoami command.","title":"Whoami"},{"location":"hub/accounts/#login","text":"If you've just initialized your account successfully, there is no need to login. However, if you are returning to the Hub and need to re-login, simply use the login command. tt login","title":"Login"},{"location":"hub/accounts/#organizations","text":"The Hub allows you to create organizations easily. Organizations can be one or many collaborators. Members of an Org have management access to the Buckets and App Keys created while in an Org's directory. Info You can create , invite , and leave organizations easily. Read more about all Org methods on the CLI docs . To learn more about sharing Buckets with an organization, read the intro on Organization Buckets .","title":"Organizations"},{"location":"hub/accounts/#enterprise-users","text":"If you are interested in enterprise support from Textile, please email us at support@textile.io .","title":"Enterprise users"},{"location":"hub/app-apis/","text":"Getting Started \u00b6 Use the Hub to help scale your applications on IFPS. The Hub APIs are available for your apps and your app users. You can use the Hub APIs with a privileged Account API Key or with a User Key . Both have the ability to push new data to Buckets, persist ThreadsDB data, and relay ThreadsDB updates. API Access \u00b6 Account Key \u00b6 Account keys provide direct access to developer and org account Buckets and Threads. Account keys make it possible to build apps that have full access to developer or organization Buckets. You can use account keys to integrate your Buckets into CI, dashboards, team messaging integration, etc. To create a new Account Key using tt key create and selecting the account option. See CLI options User Key \u00b6 User keys provide existing external identities (users) access to their own buckets and threads, under the custodianship of the parent account. Apps can create Buckets for users or persist and replicate ThreadsDB for users. A single user key can be added to your app to authenticate many users to your Hub resources. To create a new User Key using tt key create and selecting the user option. Also see Identity section and how to use identity providers such as 3Box with user keys. See CLI commands Domain whitelisting \u00b6 If you are building a web application, you can use domain whitelisting to access the same resources without embedding keys in your application. You can track the release of domain whitelisting here . App APIs \u00b6 Buckets \u00b6 Buckets provide S3-like data storage on IPFS. Just as you can create Buckets with the Hub CLI , you can create Buckets using JavaScript with js-textile . The js-textile library allows you to create and edit Buckets owned by you or your organization using an account key . Alternatively, you can use Buckets to store your user's data using a user key . ThreadsDB \u00b6 ThreadsDB is a mongo-like database that runs on IPFS. You can use it in combination with js-textile to add replication and relay to your user's databases. When combined, js-threads and js-textile allow you to embed private, p2p databases in yoru app that use remote IFPS peers for pinning and remote ThreadDB peers to relay updates to all parties. This configuration will help you scale your app and offer the highest quality experience to your users. Identity & data ownership \u00b6 The databases and Buckets you create over the API are owned in one of three ways. Developer owned. If you use an account key with the Buckets or ThreadsDB APIs, the data will be linked directly to your account. Org owned. If you create an account key using the --org flag, the Buckets and Threads will be linked to the organization. User owned. If you create a user key , Textile allows your app to provision new Buckets and Threads on behalf of your users. This data will be signed and owned by your end-users and only accessible to them. Read more on Threads Identity User identities \u00b6 User identities are flexible and can be defined in a way most suitable for your application. In the examples below we use private-key based identities exactly how Libp2p does. You can also use external identity providers or custom user identities. Libraries \u00b6 You can find all remote Thread and Bucket APIs in the textile libraries below. These libraries are meant to work in combination with the threads libraries when you want to create and manage Threads database in your app. Here are the libraries you will find useful to start building today. ThreadsDB Threads APIs & Buckets Browser, React Native, & NodeJS js-threads js-threads-client js-textile Dart & Flutter Apps ( pending release ) dart-threads-client dart-textile Golang Libraries go-threads Command-line thread-shell (coming) Hub CLI Examples \u00b6 Create a user owned ThreadsDB \u00b6 Create a new user session \u00b6 import { Context } from '@textile/textile' import { Client } from '@textile/threads-client' let ctx : Context = new Context () // `USER_KEY` comes from `tt key create` ctx = ctx . withAPIKey ( USER_KEY ) Create a db with the user identity \u00b6 Your users can be defined by any available identity provider or use any private-key based identity, such as Libp2p's identities. const identity = await Libp2pCryptoIdentity . fromRandom () const db = new Client ( ctx ) const tok = await db . getToken ( identity ) ctx = ctx . withToken ( tok ) Create a user owned thread for their buckets \u00b6 Buckets run on Threads, so your user will need a ThreadDB setup for thier own Buckets. ctx = ctx . withThreadName ( 'private-chat-0' ) const id = ThreadID . fromRandom () const db = new Client ( ctx ) await db . newDB ( id . toBytes ()) See the js-threads documentation to learn more about using threads in your app. Create a user owned Bucket \u00b6 Create a new user session \u00b6 import { Context } from '@textile/textile' import { Client } from '@textile/threads-client' let ctx : Context = new Context () // `USER_KEY` comes from `tt key create` ctx = ctx . withAPIKey ( USER_KEY ) Create a db with the user identity \u00b6 Your users can be defined by any available identity provider or use any private-key based identity, such as Libp2p's identities. const identity = await Libp2pCryptoIdentity . fromRandom () const db = new Client ( ctx ) const tok = await db . getToken ( identity ) ctx = ctx . withToken ( tok ) Create a user owned thread for their buckets \u00b6 Buckets run on Threads, so your user will need a ThreadDB setup for thier own Buckets. ctx = ctx . withThreadName ( 'my-buckets' ) const id = ThreadID . fromRandom () const db = new Client ( ctx ) await db . newDB ( id . toBytes ()) ctx = ctx . withThread ( id ) Initialize a new bucket in the db \u00b6 const buckets = new Buckets ( ctx ) const buck = await buckets . init ( 'images' , ctx ) Push a files to the bucket \u00b6 const pth = path . join ( __dirname , '..' , 'testdata' ) const stream = fs . createReadStream ( path . join ( pth , 'file1.jpg' )) const rootKey = buck . root ? . key || '' const { root } = await buckets . pushPath ( rootKey , 'dir1/file1.jpg' , stream , ctx )","title":"App APIs"},{"location":"hub/app-apis/#getting-started","text":"Use the Hub to help scale your applications on IFPS. The Hub APIs are available for your apps and your app users. You can use the Hub APIs with a privileged Account API Key or with a User Key . Both have the ability to push new data to Buckets, persist ThreadsDB data, and relay ThreadsDB updates.","title":"Getting Started"},{"location":"hub/app-apis/#api-access","text":"","title":"API Access"},{"location":"hub/app-apis/#account-key","text":"Account keys provide direct access to developer and org account Buckets and Threads. Account keys make it possible to build apps that have full access to developer or organization Buckets. You can use account keys to integrate your Buckets into CI, dashboards, team messaging integration, etc. To create a new Account Key using tt key create and selecting the account option. See CLI options","title":"Account Key"},{"location":"hub/app-apis/#user-key","text":"User keys provide existing external identities (users) access to their own buckets and threads, under the custodianship of the parent account. Apps can create Buckets for users or persist and replicate ThreadsDB for users. A single user key can be added to your app to authenticate many users to your Hub resources. To create a new User Key using tt key create and selecting the user option. Also see Identity section and how to use identity providers such as 3Box with user keys. See CLI commands","title":"User Key"},{"location":"hub/app-apis/#domain-whitelisting","text":"If you are building a web application, you can use domain whitelisting to access the same resources without embedding keys in your application. You can track the release of domain whitelisting here .","title":"Domain whitelisting"},{"location":"hub/app-apis/#app-apis","text":"","title":"App APIs"},{"location":"hub/app-apis/#buckets","text":"Buckets provide S3-like data storage on IPFS. Just as you can create Buckets with the Hub CLI , you can create Buckets using JavaScript with js-textile . The js-textile library allows you to create and edit Buckets owned by you or your organization using an account key . Alternatively, you can use Buckets to store your user's data using a user key .","title":"Buckets"},{"location":"hub/app-apis/#threadsdb","text":"ThreadsDB is a mongo-like database that runs on IPFS. You can use it in combination with js-textile to add replication and relay to your user's databases. When combined, js-threads and js-textile allow you to embed private, p2p databases in yoru app that use remote IFPS peers for pinning and remote ThreadDB peers to relay updates to all parties. This configuration will help you scale your app and offer the highest quality experience to your users.","title":"ThreadsDB"},{"location":"hub/app-apis/#identity-data-ownership","text":"The databases and Buckets you create over the API are owned in one of three ways. Developer owned. If you use an account key with the Buckets or ThreadsDB APIs, the data will be linked directly to your account. Org owned. If you create an account key using the --org flag, the Buckets and Threads will be linked to the organization. User owned. If you create a user key , Textile allows your app to provision new Buckets and Threads on behalf of your users. This data will be signed and owned by your end-users and only accessible to them. Read more on Threads Identity","title":"Identity &amp; data ownership"},{"location":"hub/app-apis/#user-identities","text":"User identities are flexible and can be defined in a way most suitable for your application. In the examples below we use private-key based identities exactly how Libp2p does. You can also use external identity providers or custom user identities.","title":"User identities"},{"location":"hub/app-apis/#libraries","text":"You can find all remote Thread and Bucket APIs in the textile libraries below. These libraries are meant to work in combination with the threads libraries when you want to create and manage Threads database in your app. Here are the libraries you will find useful to start building today. ThreadsDB Threads APIs & Buckets Browser, React Native, & NodeJS js-threads js-threads-client js-textile Dart & Flutter Apps ( pending release ) dart-threads-client dart-textile Golang Libraries go-threads Command-line thread-shell (coming) Hub CLI","title":"Libraries"},{"location":"hub/app-apis/#examples","text":"","title":"Examples"},{"location":"hub/app-apis/#create-a-user-owned-threadsdb","text":"","title":"Create a user owned ThreadsDB"},{"location":"hub/app-apis/#create-a-new-user-session","text":"import { Context } from '@textile/textile' import { Client } from '@textile/threads-client' let ctx : Context = new Context () // `USER_KEY` comes from `tt key create` ctx = ctx . withAPIKey ( USER_KEY )","title":"Create a new user session"},{"location":"hub/app-apis/#create-a-db-with-the-user-identity","text":"Your users can be defined by any available identity provider or use any private-key based identity, such as Libp2p's identities. const identity = await Libp2pCryptoIdentity . fromRandom () const db = new Client ( ctx ) const tok = await db . getToken ( identity ) ctx = ctx . withToken ( tok )","title":"Create a db with the user identity"},{"location":"hub/app-apis/#create-a-user-owned-thread-for-their-buckets","text":"Buckets run on Threads, so your user will need a ThreadDB setup for thier own Buckets. ctx = ctx . withThreadName ( 'private-chat-0' ) const id = ThreadID . fromRandom () const db = new Client ( ctx ) await db . newDB ( id . toBytes ()) See the js-threads documentation to learn more about using threads in your app.","title":"Create a user owned thread for their buckets"},{"location":"hub/app-apis/#create-a-user-owned-bucket","text":"","title":"Create a user owned Bucket"},{"location":"hub/app-apis/#create-a-new-user-session_1","text":"import { Context } from '@textile/textile' import { Client } from '@textile/threads-client' let ctx : Context = new Context () // `USER_KEY` comes from `tt key create` ctx = ctx . withAPIKey ( USER_KEY )","title":"Create a new user session"},{"location":"hub/app-apis/#create-a-db-with-the-user-identity_1","text":"Your users can be defined by any available identity provider or use any private-key based identity, such as Libp2p's identities. const identity = await Libp2pCryptoIdentity . fromRandom () const db = new Client ( ctx ) const tok = await db . getToken ( identity ) ctx = ctx . withToken ( tok )","title":"Create a db with the user identity"},{"location":"hub/app-apis/#create-a-user-owned-thread-for-their-buckets_1","text":"Buckets run on Threads, so your user will need a ThreadDB setup for thier own Buckets. ctx = ctx . withThreadName ( 'my-buckets' ) const id = ThreadID . fromRandom () const db = new Client ( ctx ) await db . newDB ( id . toBytes ()) ctx = ctx . withThread ( id )","title":"Create a user owned thread for their buckets"},{"location":"hub/app-apis/#initialize-a-new-bucket-in-the-db","text":"const buckets = new Buckets ( ctx ) const buck = await buckets . init ( 'images' , ctx )","title":"Initialize a new bucket in the db"},{"location":"hub/app-apis/#push-a-files-to-the-bucket","text":"const pth = path . join ( __dirname , '..' , 'testdata' ) const stream = fs . createReadStream ( path . join ( pth , 'file1.jpg' )) const rootKey = buck . root ? . key || '' const { root } = await buckets . pushPath ( rootKey , 'dir1/file1.jpg' , stream , ctx )","title":"Push a files to the bucket"},{"location":"hub/buckets/","text":"Buckets \u00b6 Getting Started \u00b6 If you've used cloud storage before, you'll find Buckets easy to understand. Unlike traditional cloud services, Buckets are built on open, decentralized protocols including the IPFS and Libp2p. You can serve websites, data, and apps from Buckets. Buckets are packed with useful features, including: Explore your Buckets on the Hub gateway . Render web content in your Bucket on a persistent website . Automatically distribute your updates on IPFS using IPNS . Collaboratively manage Buckets as an organization . Create private Buckets where your app users can store data . Initialize a Bucket \u00b6 When working on your local machine, Buckets are mapped to working directories. Once you initialize a Bucket in a directory, anytime you return to the directory, the Textile CLI will automatically detect the Bucket you are interacting with. To start a Bucket in your current working directory, you must first initialize the Bucket. Read CLI docs for Buckets . Shared Buckets \u00b6 You can create Buckets to share with all members of an organization. To do so, simply initialize an Org first and then initialize a Bucket using the --org flag, specifying the name of the Org you want to share the bucket with. All members of the Org will be able to push and pull files to and from the shared Bucket. Read more about creating Orgs . Publishing content \u00b6 Push new files \u00b6 View the Bucket push CLI docs . tt bucket push site/ . Retrieving content \u00b6 Pull files \u00b6 tt bucket init --existing By using the --existing flag, you can list Buckets already pushed by you or, when using --org , your collaborators. Explore on the gateway \u00b6 The Hub gateway gives you a static URL where you can explore, download, and share your latest Bucket content. Render on a website \u00b6 If your Bucket contains web content, the Bucket website endpoint will provide you a static URL that will always render the latest content from your Bucket. Render on IPFS gateways \u00b6 Buckets are dynamic folders distributed over IPFS using ThreadsDB. Each Bucket has a unique IPNS address that will allow you to render or fetch your Bucket on any IPFS peer or gateway that supports IPNS (including ipfs.io and Cloudflare ). Buckets can't change the speed that IPNS propogates through the network, but we recommend you explore and try for yourself. The Hub gateway will always render the latest data right away. Buckets CLI \u00b6 Visit Textile Hub CLI docs for Buckets . Learn more about Buckets \u00b6 Bucket Permissions \u00b6 Developer Buckets \u00b6 All Buckets you create are scoped to your developer account. You can always find your currently logged in account with tt whoami . Organization Buckets \u00b6 Any Buckets you create using the --org flag will also be shared with Org members. Here are the steps to create Org, create a new Bucket in the Org, and invite a collaborator to the Org: Create a new Org \u00b6 tt org create Choose an Org name: nasa\u2588 > The name of your account on Textile will be nasa > Your URL will be http://hub.textile.io/nasa Please confirm: y\u2588 > Success! Created new org nasa with URL http://hub.textile.io/nasa You have now created the nasa Org. Create a new Bucket shared with an Org \u00b6 mkdir launchpad cd launchpad tt bucket init --org nasa You have now created a new Bucket inside of the launchpad directory and owned by your nasa organization. Invite a collaborator \u00b6 tt org invite The final step is to invite collaborators to your Org. Once they accept the invite, they will be able to interact with Buckets associated with the Org. App user Buckets \u00b6 If you are building an app using one of our developer libraries you can use Buckets from inside yoru apps. Apps generally will create Buckets on behalf of each user, meaning the user should retain control of the Bucket metadata and contents. JS Textile Docs Create user Buckets in your JS app. 3Box example See how to use 3Box identities to own Threads and Buckets. Bucket Protocols \u00b6 Buckets are designed to be interoperable across protocols and services. Here are a few examples. Buckets and Threads \u00b6 Buckets are built on ThreadsDB . In fact, in their most basic form, Buckets are just a document in a Thread that is updated each time the directory of data is updated. Since Buckets run on Threads, it opens the door to many new integrations that can be built on Buckets! Buckets and HTTP \u00b6 Buckets can be rendered over HTTP through either the Hub Gateway , the Bucket subdomains , or on any IPFS gateway supporting IPNS (see below). Buckets and IPFS \u00b6 Data in a Bucket is stored as IPLD and pinned on IPFS. You can use the underlying content addresses to pin new Bucket content on additional pinning services such as Pinata or Infura . This can be useful if you want additinal replication of your content on the IPFS network. Buckets and IPNS \u00b6 Every Bucket you create has a unique ID associated with it. The Bucket ID is an IPNS address that you can also use to fetch the latest Bucket content from any IFPS peer or view it over IPFS gateways that support the IPNS protocol. More resources \u00b6 Textile Hub CLI Read the full CLI documentation. Textile JavaScript SDK Create Buckets from your JavaScript app.","title":"Buckets"},{"location":"hub/buckets/#buckets","text":"","title":"Buckets"},{"location":"hub/buckets/#getting-started","text":"If you've used cloud storage before, you'll find Buckets easy to understand. Unlike traditional cloud services, Buckets are built on open, decentralized protocols including the IPFS and Libp2p. You can serve websites, data, and apps from Buckets. Buckets are packed with useful features, including: Explore your Buckets on the Hub gateway . Render web content in your Bucket on a persistent website . Automatically distribute your updates on IPFS using IPNS . Collaboratively manage Buckets as an organization . Create private Buckets where your app users can store data .","title":"Getting Started"},{"location":"hub/buckets/#initialize-a-bucket","text":"When working on your local machine, Buckets are mapped to working directories. Once you initialize a Bucket in a directory, anytime you return to the directory, the Textile CLI will automatically detect the Bucket you are interacting with. To start a Bucket in your current working directory, you must first initialize the Bucket. Read CLI docs for Buckets .","title":"Initialize a Bucket"},{"location":"hub/buckets/#shared-buckets","text":"You can create Buckets to share with all members of an organization. To do so, simply initialize an Org first and then initialize a Bucket using the --org flag, specifying the name of the Org you want to share the bucket with. All members of the Org will be able to push and pull files to and from the shared Bucket. Read more about creating Orgs .","title":"Shared Buckets"},{"location":"hub/buckets/#publishing-content","text":"","title":"Publishing content"},{"location":"hub/buckets/#push-new-files","text":"View the Bucket push CLI docs . tt bucket push site/ .","title":"Push new files"},{"location":"hub/buckets/#retrieving-content","text":"","title":"Retrieving content"},{"location":"hub/buckets/#pull-files","text":"tt bucket init --existing By using the --existing flag, you can list Buckets already pushed by you or, when using --org , your collaborators.","title":"Pull files"},{"location":"hub/buckets/#explore-on-the-gateway","text":"The Hub gateway gives you a static URL where you can explore, download, and share your latest Bucket content.","title":"Explore on the gateway"},{"location":"hub/buckets/#render-on-a-website","text":"If your Bucket contains web content, the Bucket website endpoint will provide you a static URL that will always render the latest content from your Bucket.","title":"Render on a website"},{"location":"hub/buckets/#render-on-ipfs-gateways","text":"Buckets are dynamic folders distributed over IPFS using ThreadsDB. Each Bucket has a unique IPNS address that will allow you to render or fetch your Bucket on any IPFS peer or gateway that supports IPNS (including ipfs.io and Cloudflare ). Buckets can't change the speed that IPNS propogates through the network, but we recommend you explore and try for yourself. The Hub gateway will always render the latest data right away.","title":"Render on IPFS gateways"},{"location":"hub/buckets/#buckets-cli","text":"Visit Textile Hub CLI docs for Buckets .","title":"Buckets CLI"},{"location":"hub/buckets/#learn-more-about-buckets","text":"","title":"Learn more about Buckets"},{"location":"hub/buckets/#bucket-permissions","text":"","title":"Bucket Permissions"},{"location":"hub/buckets/#developer-buckets","text":"All Buckets you create are scoped to your developer account. You can always find your currently logged in account with tt whoami .","title":"Developer Buckets"},{"location":"hub/buckets/#organization-buckets","text":"Any Buckets you create using the --org flag will also be shared with Org members. Here are the steps to create Org, create a new Bucket in the Org, and invite a collaborator to the Org:","title":"Organization Buckets"},{"location":"hub/buckets/#create-a-new-org","text":"tt org create Choose an Org name: nasa\u2588 > The name of your account on Textile will be nasa > Your URL will be http://hub.textile.io/nasa Please confirm: y\u2588 > Success! Created new org nasa with URL http://hub.textile.io/nasa You have now created the nasa Org.","title":"Create a new Org"},{"location":"hub/buckets/#create-a-new-bucket-shared-with-an-org","text":"mkdir launchpad cd launchpad tt bucket init --org nasa You have now created a new Bucket inside of the launchpad directory and owned by your nasa organization.","title":"Create a new Bucket shared with an Org"},{"location":"hub/buckets/#invite-a-collaborator","text":"tt org invite The final step is to invite collaborators to your Org. Once they accept the invite, they will be able to interact with Buckets associated with the Org.","title":"Invite a collaborator"},{"location":"hub/buckets/#app-user-buckets","text":"If you are building an app using one of our developer libraries you can use Buckets from inside yoru apps. Apps generally will create Buckets on behalf of each user, meaning the user should retain control of the Bucket metadata and contents.","title":"App user Buckets"},{"location":"hub/buckets/#bucket-protocols","text":"Buckets are designed to be interoperable across protocols and services. Here are a few examples.","title":"Bucket Protocols"},{"location":"hub/buckets/#buckets-and-threads","text":"Buckets are built on ThreadsDB . In fact, in their most basic form, Buckets are just a document in a Thread that is updated each time the directory of data is updated. Since Buckets run on Threads, it opens the door to many new integrations that can be built on Buckets!","title":"Buckets and Threads"},{"location":"hub/buckets/#buckets-and-http","text":"Buckets can be rendered over HTTP through either the Hub Gateway , the Bucket subdomains , or on any IPFS gateway supporting IPNS (see below).","title":"Buckets and HTTP"},{"location":"hub/buckets/#buckets-and-ipfs","text":"Data in a Bucket is stored as IPLD and pinned on IPFS. You can use the underlying content addresses to pin new Bucket content on additional pinning services such as Pinata or Infura . This can be useful if you want additinal replication of your content on the IPFS network.","title":"Buckets and IPFS"},{"location":"hub/buckets/#buckets-and-ipns","text":"Every Bucket you create has a unique ID associated with it. The Bucket ID is an IPNS address that you can also use to fetch the latest Bucket content from any IFPS peer or view it over IPFS gateways that support the IPNS protocol.","title":"Buckets and IPNS"},{"location":"hub/buckets/#more-resources","text":"","title":"More resources"},{"location":"hub/introduction/","text":"The Hub is a portal where teams and individual developers can access IPFS and soon Filecoin resources easily. The Hub makes it simple to manage and update Buckets on IPFS, persist data for your users on IPFS, deploy and scale Threads databases for your app users, and collaborate on all of it with your team! Getting Started \u00b6 The Hub is API driven and available through the command-line tool and developer libraries. To use the Hub, first you need to download the command-line interface and create an account. Textile Hub Accounts Download the CLI and create your free Hub account. Once you have your Hub account, you can start using the Hub to host your data on the IPFS network. IPFS hosting is offered using a Textile technology called, Buckets. Buckets offer you dynamic, folder-based, directories that you can use to persist data on IPFS. They are editable, sharable, and come with free URLs. Buckets Learn how to create, manage, share, and publish data on IPFS. Another thing you can do with your account on the Hub, is create an app token that will allow you to use the Hub for persisting user Thread data. Think of it as a trustless service that your app's database can rely on to keep data on IPFS fast! Thread Services Persist and relay Thread updates for your app users. Other Documentation \u00b6 Next steps \u00b6 Create an Account Start using hosted services by creating your free account. Connect your Apps Learn how to use the Hub's APIs in your app. Hub CLI Read the full CLI documentation.","title":"Introduction"},{"location":"hub/introduction/#getting-started","text":"The Hub is API driven and available through the command-line tool and developer libraries. To use the Hub, first you need to download the command-line interface and create an account.","title":"Getting Started"},{"location":"hub/introduction/#other-documentation","text":"","title":"Other Documentation"},{"location":"hub/introduction/#next-steps","text":"","title":"Next steps"},{"location":"hub/cli/tt/","text":"Textile Hub Client \u00b6 Options \u00b6 -h, --help help for tt -s, --session string User session token SEE ALSO \u00b6 tt bucket - Manage a bucket tt init - Initialize account tt keys - Key management tt login - Login tt logout - Logout tt orgs - Org management tt threads - Thread management tt whoami - Show current user","title":"CLI Docs"},{"location":"hub/cli/tt/#textile-hub-client","text":"","title":"Textile Hub Client"},{"location":"hub/cli/tt/#options","text":"-h, --help help for tt -s, --session string User session token","title":"Options"},{"location":"hub/cli/tt/#see-also","text":"tt bucket - Manage a bucket tt init - Initialize account tt keys - Key management tt login - Login tt logout - Logout tt orgs - Org management tt threads - Thread management tt whoami - Show current user","title":"SEE ALSO"},{"location":"hub/cli/tt_bucket/","text":"bucket \u00b6 Init new buckets and push and pull files and folders. tt bucket [flags] Options \u00b6 -h, --help help for bucket SEE ALSO \u00b6 tt - Textile Hub Client tt bucket cat - Cat a bucket path file tt bucket init - Create an empty bucket tt bucket links - Print links to where this Bucket can be accessed tt bucket ls - List bucket path contents tt bucket pull - Pull a bucket path tt bucket push - Push to a bucket path (interactive) tt bucket rm - Remove bucket path contents","title":"Bucket"},{"location":"hub/cli/tt_bucket/#bucket","text":"Init new buckets and push and pull files and folders. tt bucket [flags]","title":"bucket"},{"location":"hub/cli/tt_bucket/#options","text":"-h, --help help for bucket","title":"Options"},{"location":"hub/cli/tt_bucket/#see-also","text":"tt - Textile Hub Client tt bucket cat - Cat a bucket path file tt bucket init - Create an empty bucket tt bucket links - Print links to where this Bucket can be accessed tt bucket ls - List bucket path contents tt bucket pull - Pull a bucket path tt bucket push - Push to a bucket path (interactive) tt bucket rm - Remove bucket path contents","title":"SEE ALSO"},{"location":"hub/cli/tt_bucket_cat/","text":"bucket cat \u00b6 Cat a file at a bucket path. tt bucket cat [path] [flags] Options \u00b6 -h, --help help for cat SEE ALSO \u00b6 tt bucket - Manage a bucket","title":"bucket cat"},{"location":"hub/cli/tt_bucket_cat/#bucket-cat","text":"Cat a file at a bucket path. tt bucket cat [path] [flags]","title":"bucket cat"},{"location":"hub/cli/tt_bucket_cat/#options","text":"-h, --help help for cat","title":"Options"},{"location":"hub/cli/tt_bucket_cat/#see-also","text":"tt bucket - Manage a bucket","title":"SEE ALSO"},{"location":"hub/cli/tt_bucket_init/","text":"bucket init \u00b6 Create an empty bucket. A .textile directory and config file will be created in the current working directory. Existing configs will not be overwritten. tt bucket init [flags] Options \u00b6 --existing If set, initalizes from an existing remote Bucket -h, --help help for init --key string Bucket key --org string Org username --public Allow public access --thread string Thread ID SEE ALSO \u00b6 tt bucket - Manage a bucket","title":"bucket init"},{"location":"hub/cli/tt_bucket_init/#bucket-init","text":"Create an empty bucket. A .textile directory and config file will be created in the current working directory. Existing configs will not be overwritten. tt bucket init [flags]","title":"bucket init"},{"location":"hub/cli/tt_bucket_init/#options","text":"--existing If set, initalizes from an existing remote Bucket -h, --help help for init --key string Bucket key --org string Org username --public Allow public access --thread string Thread ID","title":"Options"},{"location":"hub/cli/tt_bucket_init/#see-also","text":"tt bucket - Manage a bucket","title":"SEE ALSO"},{"location":"hub/cli/tt_bucket_links/","text":"bucket links \u00b6 Print links to where this Bucket can be accessed. tt bucket links [flags] Options \u00b6 -h, --help help for links SEE ALSO \u00b6 tt bucket - Manage a bucket","title":"bucket links"},{"location":"hub/cli/tt_bucket_links/#bucket-links","text":"Print links to where this Bucket can be accessed. tt bucket links [flags]","title":"bucket links"},{"location":"hub/cli/tt_bucket_links/#options","text":"-h, --help help for links","title":"Options"},{"location":"hub/cli/tt_bucket_links/#see-also","text":"tt bucket - Manage a bucket","title":"SEE ALSO"},{"location":"hub/cli/tt_bucket_ls/","text":"bucket ls \u00b6 List files and directories under a bucket path. tt bucket ls [path] [flags] Options \u00b6 -h, --help help for ls SEE ALSO \u00b6 tt bucket - Manage a bucket","title":"bucket ls"},{"location":"hub/cli/tt_bucket_ls/#bucket-ls","text":"List files and directories under a bucket path. tt bucket ls [path] [flags]","title":"bucket ls"},{"location":"hub/cli/tt_bucket_ls/#options","text":"-h, --help help for ls","title":"Options"},{"location":"hub/cli/tt_bucket_ls/#see-also","text":"tt bucket - Manage a bucket","title":"SEE ALSO"},{"location":"hub/cli/tt_bucket_pull/","text":"bucket pull \u00b6 Pull files and directories from a bucket path. Existing paths will be overwritten. Non-existing paths will be created. Bucket structure is mirrored locally. For example, given the bucket: foo/one.txt foo/bar/two.txt foo/bar/baz/three.txt These 'pull' commands result in the following local structures. 'tt bucket pull foo mydir': mydir/foo/one.txt mydir/foo/bar/two.txt mydir/foo/bar/baz/three.txt 'tt bucket pull foo/bar mydir': mydir/bar/two.txt mydir/bar/baz/three.txt 'tt bucket pull foo/bar/baz mydir': mydir/baz/three.txt 'tt bucket pull foo/bar/baz/three.txt mydir': mydir/three.txt 'tt bucket pull foo .': foo/one.txt foo/bar/two.txt foo/bar/baz/three.txt tt bucket pull [path] [destination] [flags] Options \u00b6 -h, --help help for pull SEE ALSO \u00b6 tt bucket - Manage a bucket","title":"bucket pull"},{"location":"hub/cli/tt_bucket_pull/#bucket-pull","text":"Pull files and directories from a bucket path. Existing paths will be overwritten. Non-existing paths will be created. Bucket structure is mirrored locally. For example, given the bucket: foo/one.txt foo/bar/two.txt foo/bar/baz/three.txt These 'pull' commands result in the following local structures. 'tt bucket pull foo mydir': mydir/foo/one.txt mydir/foo/bar/two.txt mydir/foo/bar/baz/three.txt 'tt bucket pull foo/bar mydir': mydir/bar/two.txt mydir/bar/baz/three.txt 'tt bucket pull foo/bar/baz mydir': mydir/baz/three.txt 'tt bucket pull foo/bar/baz/three.txt mydir': mydir/three.txt 'tt bucket pull foo .': foo/one.txt foo/bar/two.txt foo/bar/baz/three.txt tt bucket pull [path] [destination] [flags]","title":"bucket pull"},{"location":"hub/cli/tt_bucket_pull/#options","text":"-h, --help help for pull","title":"Options"},{"location":"hub/cli/tt_bucket_pull/#see-also","text":"tt bucket - Manage a bucket","title":"SEE ALSO"},{"location":"hub/cli/tt_bucket_push/","text":"bucket push \u00b6 Push files and directories to a bucket path. Existing paths will be overwritten. Non-existing paths will be created. Using the '--org' flag will create a new bucket under the organization's account. File structure is mirrored in the bucket. For example, given the directory: foo/one.txt foo/bar/two.txt foo/bar/baz/three.txt These 'push' commands result in the following bucket structures. 'tt bucket push foo/ .': one.txt bar/two.txt bar/baz/three.txt 'tt bucket push foo mybuck': mybuck/foo/one.txt mybuck/foo/bar/two.txt mybuck/foo/bar/baz/three.txt 'tt bucket push foo/bar mybuck': mybuck/bar/two.txt mybuck/bar/baz/three.txt 'tt bucket push foo/bar/baz mybuck': mybuck/baz/three.txt 'tt bucket push foo/bar/baz/three.txt mybuck': mybuck/three.txt tt bucket push [target] [path] [flags] Options \u00b6 -h, --help help for push SEE ALSO \u00b6 tt bucket - Manage a bucket","title":"bucket push"},{"location":"hub/cli/tt_bucket_push/#bucket-push","text":"Push files and directories to a bucket path. Existing paths will be overwritten. Non-existing paths will be created. Using the '--org' flag will create a new bucket under the organization's account. File structure is mirrored in the bucket. For example, given the directory: foo/one.txt foo/bar/two.txt foo/bar/baz/three.txt These 'push' commands result in the following bucket structures. 'tt bucket push foo/ .': one.txt bar/two.txt bar/baz/three.txt 'tt bucket push foo mybuck': mybuck/foo/one.txt mybuck/foo/bar/two.txt mybuck/foo/bar/baz/three.txt 'tt bucket push foo/bar mybuck': mybuck/bar/two.txt mybuck/bar/baz/three.txt 'tt bucket push foo/bar/baz mybuck': mybuck/baz/three.txt 'tt bucket push foo/bar/baz/three.txt mybuck': mybuck/three.txt tt bucket push [target] [path] [flags]","title":"bucket push"},{"location":"hub/cli/tt_bucket_push/#options","text":"-h, --help help for push","title":"Options"},{"location":"hub/cli/tt_bucket_push/#see-also","text":"tt bucket - Manage a bucket","title":"SEE ALSO"},{"location":"hub/cli/tt_bucket_rm/","text":"bucket rm \u00b6 Remove files and directories under a bucket path. tt bucket rm [path] [flags] Options \u00b6 -h, --help help for rm SEE ALSO \u00b6 tt bucket - Manage a bucket","title":"bucket rm"},{"location":"hub/cli/tt_bucket_rm/#bucket-rm","text":"Remove files and directories under a bucket path. tt bucket rm [path] [flags]","title":"bucket rm"},{"location":"hub/cli/tt_bucket_rm/#options","text":"-h, --help help for rm","title":"Options"},{"location":"hub/cli/tt_bucket_rm/#see-also","text":"tt bucket - Manage a bucket","title":"SEE ALSO"},{"location":"hub/cli/tt_init/","text":"init \u00b6 Initialize a new Textile account (interactive). tt init [flags] Options \u00b6 -h, --help help for init SEE ALSO \u00b6 tt - Textile Hub Client","title":"init"},{"location":"hub/cli/tt_init/#init","text":"Initialize a new Textile account (interactive). tt init [flags]","title":"init"},{"location":"hub/cli/tt_init/#options","text":"-h, --help help for init","title":"Options"},{"location":"hub/cli/tt_init/#see-also","text":"tt - Textile Hub Client","title":"SEE ALSO"},{"location":"hub/cli/tt_keys/","text":"keys \u00b6 Manage your keys. tt keys [flags] Options \u00b6 -h, --help help for keys --org string Org username SEE ALSO \u00b6 tt - Textile Hub Client tt keys create - Create an API key and secret tt keys invalidate - Invalidate a key tt keys ls - List your keys","title":"API Keys"},{"location":"hub/cli/tt_keys/#keys","text":"Manage your keys. tt keys [flags]","title":"keys"},{"location":"hub/cli/tt_keys/#options","text":"-h, --help help for keys --org string Org username","title":"Options"},{"location":"hub/cli/tt_keys/#see-also","text":"tt - Textile Hub Client tt keys create - Create an API key and secret tt keys invalidate - Invalidate a key tt keys ls - List your keys","title":"SEE ALSO"},{"location":"hub/cli/tt_keys_create/","text":"keys create \u00b6 Create a new API key and secret. Keys are used by apps and services that leverage buckets or threads. Using the '--org' flag will create a new key under the Organization's account. There are two types of API keys: 1. 'Account' keys provide direct access to developer/org account buckets and threads. 2. 'User' keys provide existing external identities (users) access to their own buckets and threads, under the custodianship of the parent account. API secrets should be kept safely on a backend server, not in publicly readable client code. tt keys create [flags] Options \u00b6 -h, --help help for create SEE ALSO \u00b6 tt keys - Key management","title":"keys create"},{"location":"hub/cli/tt_keys_create/#keys-create","text":"Create a new API key and secret. Keys are used by apps and services that leverage buckets or threads. Using the '--org' flag will create a new key under the Organization's account. There are two types of API keys: 1. 'Account' keys provide direct access to developer/org account buckets and threads. 2. 'User' keys provide existing external identities (users) access to their own buckets and threads, under the custodianship of the parent account. API secrets should be kept safely on a backend server, not in publicly readable client code. tt keys create [flags]","title":"keys create"},{"location":"hub/cli/tt_keys_create/#options","text":"-h, --help help for create","title":"Options"},{"location":"hub/cli/tt_keys_create/#see-also","text":"tt keys - Key management","title":"SEE ALSO"},{"location":"hub/cli/tt_keys_invalidate/","text":"keys invalidate \u00b6 Invalidate a key. Invalidated keys cannot be used to create new threads. tt keys invalidate [flags] Options \u00b6 -h, --help help for invalidate SEE ALSO \u00b6 tt keys - Key management","title":"keys invalidate"},{"location":"hub/cli/tt_keys_invalidate/#keys-invalidate","text":"Invalidate a key. Invalidated keys cannot be used to create new threads. tt keys invalidate [flags]","title":"keys invalidate"},{"location":"hub/cli/tt_keys_invalidate/#options","text":"-h, --help help for invalidate","title":"Options"},{"location":"hub/cli/tt_keys_invalidate/#see-also","text":"tt keys - Key management","title":"SEE ALSO"},{"location":"hub/cli/tt_keys_ls/","text":"keys ls \u00b6 List all of your keys. tt keys ls [flags] Options \u00b6 -h, --help help for ls SEE ALSO \u00b6 tt keys - Key management","title":"keys ls"},{"location":"hub/cli/tt_keys_ls/#keys-ls","text":"List all of your keys. tt keys ls [flags]","title":"keys ls"},{"location":"hub/cli/tt_keys_ls/#options","text":"-h, --help help for ls","title":"Options"},{"location":"hub/cli/tt_keys_ls/#see-also","text":"tt keys - Key management","title":"SEE ALSO"},{"location":"hub/cli/tt_login/","text":"login \u00b6 Login to Textile. You must use tt init to create a new account before you login. tt login [flags] Options \u00b6 -h, --help help for login SEE ALSO \u00b6 tt - Textile Hub Client","title":"Login"},{"location":"hub/cli/tt_login/#login","text":"Login to Textile. You must use tt init to create a new account before you login. tt login [flags]","title":"login"},{"location":"hub/cli/tt_login/#options","text":"-h, --help help for login","title":"Options"},{"location":"hub/cli/tt_login/#see-also","text":"tt - Textile Hub Client","title":"SEE ALSO"},{"location":"hub/cli/tt_logout/","text":"logout \u00b6 Logout of Textile. tt logout [flags] Options \u00b6 -h, --help help for logout SEE ALSO \u00b6 tt - Textile Hub Client","title":"Logout"},{"location":"hub/cli/tt_logout/#logout","text":"Logout of Textile. tt logout [flags]","title":"logout"},{"location":"hub/cli/tt_logout/#options","text":"-h, --help help for logout","title":"Options"},{"location":"hub/cli/tt_logout/#see-also","text":"tt - Textile Hub Client","title":"SEE ALSO"},{"location":"hub/cli/tt_orgs/","text":"orgs \u00b6 Manage your organizations. tt orgs [flags] Options \u00b6 -h, --help help for orgs SEE ALSO \u00b6 tt - Textile Hub Client tt orgs create - Create an Org tt orgs invite - Invite members to an Org tt orgs leave - Leave an Org tt orgs ls - List Orgs you're a member of tt orgs members - List Org members tt orgs rm - Remove an Org","title":"Orgs"},{"location":"hub/cli/tt_orgs/#orgs","text":"Manage your organizations. tt orgs [flags]","title":"orgs"},{"location":"hub/cli/tt_orgs/#options","text":"-h, --help help for orgs","title":"Options"},{"location":"hub/cli/tt_orgs/#see-also","text":"tt - Textile Hub Client tt orgs create - Create an Org tt orgs invite - Invite members to an Org tt orgs leave - Leave an Org tt orgs ls - List Orgs you're a member of tt orgs members - List Org members tt orgs rm - Remove an Org","title":"SEE ALSO"},{"location":"hub/cli/tt_orgs_create/","text":"orgs create \u00b6 Create a new organization (interactive). tt orgs create [flags] Options \u00b6 -h, --help help for create SEE ALSO \u00b6 tt orgs - Org management","title":"orgs create"},{"location":"hub/cli/tt_orgs_create/#orgs-create","text":"Create a new organization (interactive). tt orgs create [flags]","title":"orgs create"},{"location":"hub/cli/tt_orgs_create/#options","text":"-h, --help help for create","title":"Options"},{"location":"hub/cli/tt_orgs_create/#see-also","text":"tt orgs - Org management","title":"SEE ALSO"},{"location":"hub/cli/tt_orgs_invite/","text":"orgs invite \u00b6 Invite a new member to an organization. tt orgs invite [flags] Options \u00b6 -h, --help help for invite SEE ALSO \u00b6 tt orgs - Org management","title":"orgs invite"},{"location":"hub/cli/tt_orgs_invite/#orgs-invite","text":"Invite a new member to an organization. tt orgs invite [flags]","title":"orgs invite"},{"location":"hub/cli/tt_orgs_invite/#options","text":"-h, --help help for invite","title":"Options"},{"location":"hub/cli/tt_orgs_invite/#see-also","text":"tt orgs - Org management","title":"SEE ALSO"},{"location":"hub/cli/tt_orgs_leave/","text":"orgs leave \u00b6 Leave an organization (interactive). tt orgs leave [flags] Options \u00b6 -h, --help help for leave SEE ALSO \u00b6 tt orgs - Org management","title":"orgs leave"},{"location":"hub/cli/tt_orgs_leave/#orgs-leave","text":"Leave an organization (interactive). tt orgs leave [flags]","title":"orgs leave"},{"location":"hub/cli/tt_orgs_leave/#options","text":"-h, --help help for leave","title":"Options"},{"location":"hub/cli/tt_orgs_leave/#see-also","text":"tt orgs - Org management","title":"SEE ALSO"},{"location":"hub/cli/tt_orgs_ls/","text":"orgs ls \u00b6 List all the organizations that you're a member of. tt orgs ls [flags] Options \u00b6 -h, --help help for ls SEE ALSO \u00b6 tt orgs - Org management","title":"orgs ls"},{"location":"hub/cli/tt_orgs_ls/#orgs-ls","text":"List all the organizations that you're a member of. tt orgs ls [flags]","title":"orgs ls"},{"location":"hub/cli/tt_orgs_ls/#options","text":"-h, --help help for ls","title":"Options"},{"location":"hub/cli/tt_orgs_ls/#see-also","text":"tt orgs - Org management","title":"SEE ALSO"},{"location":"hub/cli/tt_orgs_members/","text":"orgs members \u00b6 List current organization members (interactive). tt orgs members [flags] Options \u00b6 -h, --help help for members SEE ALSO \u00b6 tt orgs - Org management","title":"orgs members"},{"location":"hub/cli/tt_orgs_members/#orgs-members","text":"List current organization members (interactive). tt orgs members [flags]","title":"orgs members"},{"location":"hub/cli/tt_orgs_members/#options","text":"-h, --help help for members","title":"Options"},{"location":"hub/cli/tt_orgs_members/#see-also","text":"tt orgs - Org management","title":"SEE ALSO"},{"location":"hub/cli/tt_orgs_rm/","text":"orgs rm \u00b6 Remove an organization (interactive). You must be the Org owner. tt orgs rm [flags] Options \u00b6 -h, --help help for rm SEE ALSO \u00b6 tt orgs - Org management","title":"orgs rm"},{"location":"hub/cli/tt_orgs_rm/#orgs-rm","text":"Remove an organization (interactive). You must be the Org owner. tt orgs rm [flags]","title":"orgs rm"},{"location":"hub/cli/tt_orgs_rm/#options","text":"-h, --help help for rm","title":"Options"},{"location":"hub/cli/tt_orgs_rm/#see-also","text":"tt orgs - Org management","title":"SEE ALSO"},{"location":"hub/cli/tt_threads/","text":"threads \u00b6 Manage your threads. tt threads [flags] Options \u00b6 -h, --help help for threads --org string Org username SEE ALSO \u00b6 tt - Textile Hub Client tt threads ls - List your threads","title":"Threads"},{"location":"hub/cli/tt_threads/#threads","text":"Manage your threads. tt threads [flags]","title":"threads"},{"location":"hub/cli/tt_threads/#options","text":"-h, --help help for threads --org string Org username","title":"Options"},{"location":"hub/cli/tt_threads/#see-also","text":"tt - Textile Hub Client tt threads ls - List your threads","title":"SEE ALSO"},{"location":"hub/cli/tt_threads_ls/","text":"threads ls \u00b6 List all of your threads. tt threads ls [flags] Options \u00b6 -h, --help help for ls SEE ALSO \u00b6 tt threads - Thread management","title":"threads ls"},{"location":"hub/cli/tt_threads_ls/#threads-ls","text":"List all of your threads. tt threads ls [flags]","title":"threads ls"},{"location":"hub/cli/tt_threads_ls/#options","text":"-h, --help help for ls","title":"Options"},{"location":"hub/cli/tt_threads_ls/#see-also","text":"tt threads - Thread management","title":"SEE ALSO"},{"location":"hub/cli/tt_whoami/","text":"whoami \u00b6 Show the user for the current session. tt whoami [flags] Options \u00b6 -h, --help help for whoami SEE ALSO \u00b6 tt - Textile Hub Client","title":"Whoami"},{"location":"hub/cli/tt_whoami/#whoami","text":"Show the user for the current session. tt whoami [flags]","title":"whoami"},{"location":"hub/cli/tt_whoami/#options","text":"-h, --help help for whoami","title":"Options"},{"location":"hub/cli/tt_whoami/#see-also","text":"tt - Textile Hub Client","title":"SEE ALSO"},{"location":"policies/code-of-conduct/","text":"Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at contact@textile.io . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Code of conduct"},{"location":"policies/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"policies/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"policies/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"policies/code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"policies/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at contact@textile.io . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"policies/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Attribution"},{"location":"policies/license/","text":"Unless otherwise explicitly stated, all Textile code and software products are licensed under the following license: MIT License \u00b6 Copyright \u00a9 2018, 2019 Textile Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"policies/license/#mit-license","text":"Copyright \u00a9 2018, 2019 Textile Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"policies/privacy/","text":"Textile provides exchange and storage of data. Textile provides remote data storage for users on the IPFS network (see https://ipfs.io/ ). The IPFS protocol has no mechanisms for deletion of data hosted on multiple providers on the network. When a Textile user 'deletes' data, we will remove that data from all servers in the IPFS network run by Textile. Information We Have \u00b6 Certain information (e.g. a user email, public keys, encrypted data content address, decrypted data, etc.) are transmitted to us solely for the purpose of transmitting and storing data. Unless otherwise stated below, this information is only kept as long as necessary to place each call or transmit each message, and is not used for any other purpose. Information we store The identifier you register with. The email contact address of any developer you invite to an organization. Encrypted or decrypted contents of ThreadsDB. Encrypted or decrypted contents of Buckets. Transient information IP addresses may be kept for up to 90 days for rate limiting and to prevent abuse. Textile is currently collecting performance metrics and critical issues detected in our software. This data may be kept for up to a year. Information We May Share \u00b6 We do not share your information with companies, organizations, and individuals outside of Textile unless one of the following circumstances applies: With your consent. The data is encrypted and stored on IPFS hosts. When legally required. We will share the information we have with entities outside of Textile if we have a good faith belief that access, use, preservation, or disclosure of the information is necessary to: meet any applicable law, regulation, legal process or enforceable governmental request. enforce applicable Terms of Service, including investigation of potential violations. detect, prevent, or otherwise address fraud, security, or technical issues. protect against harm to the rights, property, or safety of Textile, our users, or the public as required or permitted by law. We will update this privacy policy as needed so that it is current, accurate, and as clear as possible. Please contact us with any questions at contact@textile.io Changelog \u00b6 05.04.20: Finalize TOS for new Textile Hub, Buckets, and ThreadsDB services.","title":"Privacy"},{"location":"policies/privacy/#information-we-have","text":"Certain information (e.g. a user email, public keys, encrypted data content address, decrypted data, etc.) are transmitted to us solely for the purpose of transmitting and storing data. Unless otherwise stated below, this information is only kept as long as necessary to place each call or transmit each message, and is not used for any other purpose. Information we store The identifier you register with. The email contact address of any developer you invite to an organization. Encrypted or decrypted contents of ThreadsDB. Encrypted or decrypted contents of Buckets. Transient information IP addresses may be kept for up to 90 days for rate limiting and to prevent abuse. Textile is currently collecting performance metrics and critical issues detected in our software. This data may be kept for up to a year.","title":"Information We Have"},{"location":"policies/privacy/#information-we-may-share","text":"We do not share your information with companies, organizations, and individuals outside of Textile unless one of the following circumstances applies: With your consent. The data is encrypted and stored on IPFS hosts. When legally required. We will share the information we have with entities outside of Textile if we have a good faith belief that access, use, preservation, or disclosure of the information is necessary to: meet any applicable law, regulation, legal process or enforceable governmental request. enforce applicable Terms of Service, including investigation of potential violations. detect, prevent, or otherwise address fraud, security, or technical issues. protect against harm to the rights, property, or safety of Textile, our users, or the public as required or permitted by law. We will update this privacy policy as needed so that it is current, accurate, and as clear as possible. Please contact us with any questions at contact@textile.io","title":"Information We May Share"},{"location":"policies/privacy/#changelog","text":"05.04.20: Finalize TOS for new Textile Hub, Buckets, and ThreadsDB services.","title":"Changelog"},{"location":"policies/terms/","text":"Last updated: 05/04/20 Welcome to Textile. Please read these terms of service (these \u201c Terms \u201d) carefully as they form a contract between you and We Are Set, Inc, a Delaware corporation ( Textile , \u201c we \u201d, \u201c us \u201d, or \u201c our \u201d), that governs your access and use of (i) the web verification and encryption solution software provided by Textile (the \u201c Software \u201d); (ii) the Textile websites at textile.io (the \u201c Site \u201d); and (iii) any written or electronic use or features guides or other documentation provided or made available by Textile (the \u201c User Guides \u201d) (collectively the \u201c Service(s) \u201d). By registering or using any of the Services you agree to be bound by these Terms. If you are using the Services on behalf of an organization, you are agreeing to these Terms for that organization and promising to Textile that you have the authority to bind that organization to these Terms (in which event, \u201cyou\u201d and \u201cyour\u201d will refer to that organization). You may use the Services only in compliance with these Terms and only if you have the power to form a contract with Textile and are not barred under any applicable laws from doing so. IF YOU DO NOT AGREE TO BE BOUND BY THESE TERMS, YOU MUST NOT USE THE SERVICES . BY CLICKING THE CONFIRMATION LINK WHEN YOU OPEN AN ACCOUNT WITH US, YOU ACKNOWLEDGE AND AGREE TO BE BOUND TO THE TERMS. Should you have any questions concerning this Agreement, please contact privacy@textile.io . Please note that Textile does not provide warranties for the Services. This contract also limits our liability to you and contains an arbitration provision and a class action waiver. See Sections 14 (NO WARRANTY), 16 (LIMITATION OF LIABILITY) and 19 (ARBITRATION) of these Terms for details. 1. About this Service \u00b6 The Service offers verification and authentication services and encryption services for users. The Service provides a data storage system (\" Storage \") for developers to maintain remote copies of User Content. Storage is managed on IPFS ( https://www.ipfs.io/ ) nodes running on a user's personal device and replicated on remote IPFS nodes maintained by the Company. If you shared User Content which you no longer want to share publicly or privately using our Services, you must either delete that User Content or your Account. By making such deletion, the relevant User Content will become unlinked from the IPFS network and will be deleted from our IPFS node. You agree to immediately notify Company of any unauthorized use, or suspected unauthorized use of your Account or any other breach of security. Company cannot and will not be liable for any loss or damage arising from your failure to comply with the above requirements. 2. Changes to these Terms \u00b6 We reserve the right to revise these Terms from time to time. We will date and post the most current version of these Terms on the Site. Any changes will be effective upon posting the revised version of these Terms (or such later effective date as may be indicated at the top of the revised Terms). If, in our sole discretion, we deem a revision to these Terms to be material, we will notify you via the Service and/or by email to the email address associated with your account. Notice of other changes may be provided via the Site. Therefore, we encourage you to check the date of these Terms whenever you visit the Site to see if these Terms have been updated. Your continued access or use of any portion of the Service constitutes your acceptance of such changes. If you don\u2019t agree to any of the changes, we\u2019re not obligated to keep providing the Service to you, and you must cancel and stop using the Service. 3. Access to the Service \u00b6 You may use the Service, on a non-exclusive basis, solely in strict compliance with these Terms and all applicable laws. 4. Your Account \u00b6 To obtain access to certain Services, you may be required to obtain an account with Textile (become a \u201c Registered User \u201d). Until you apply for and are approved for an account your access to the Service will be limited to the areas of the Service, if any, that Textile makes available to the general public. When registering with Textile you must: (a) provide true, accurate, current and complete information about yourself as requested by the Service\u2019s registration form (such information being the \u201c Registration Data \u201d); and (b) maintain and promptly update the Registration Data to keep it true, accurate, current and complete. Textile may deny approval or withdraw such approval at any time in its sole discretion, with or without cause. Only you may use your Textile account. You must keep your account and passwords confidential and not authorize any third party to access or use the Service on your behalf, unless we provide an approved mechanism for such use. Textile will not be liable for any loss or damage arising from any unauthorized use of your accounts. CONTENT You represent and warrant that none of the following infringe any intellectual property, publicity or other proprietary rights: your provision of Your Content to us, your causing Your Content to be posted using the Service, and use of any such content (including of works derived from it) by us, other users of the Service, or others in contract with us that is done in connection with the Service and in compliance with these Terms. You acknowledge and agree that we may access or disclose information about you or any other information or data collected, stored or processed on our servers, including Your Content, if required to do so by law or in the good-faith belief that such action is necessary to: (a) comply with any law, regulation, legal process or lawful governmental requests; (b) protect the rights or property of Textile or our customers, including the enforcement of our agreements or policies governing your use of the Service; or \u00a9 act on a good faith belief that such access or disclosure is necessary to protect the personal safety of Textile employees, customers, or the public. We retain the right to block or otherwise prevent delivery of any type of file, email or other communication to or from the Service as part of our efforts to protect the Service, protect our customers, or stop you from breaching these Terms. 6. Consent to Electronic Communications and Solicitation \u00b6 By registering for the Service, you understand that we may send you communications or data regarding the Services, including but not limited to: (a) notices about your use of the Services, including any notices concerning violations of use; (b) updates; and \u00a9 promotional information and materials regarding Textile\u2019s products and services, via electronic mail. We give you the opportunity to opt-out of receiving promotional electronic mail from us by following the opt-out instructions provided in the message. 7. Suspension and Termination of Use of the Service \u00b6 We reserve the right, to temporarily suspend or terminate your access to the Service at any time in our sole discretion, with or without cause, with or without notice, and without incurring liability of any kind. For example, we may suspend or terminate your access to or use of the Service for: (a) the actual or suspected violation of these Terms; (b) the use of the Services in a manner that may cause Textile to have legal liability or disrupt others\u2019 use of the Services; \u00a9 the suspicion or detection of any malicious code, virus or other harmful code by you or in your account; (d) scheduled downtime and recurring downtime; (e) any actual or suspected effort by you to circumvent Textile\u2019s security or encryption; or (f) unplanned technical problems and outages. If, in Textile\u2019s determination, the suspension might be indefinite and/or Textile has elected to terminate your access to the Service, Textile will use commercially reasonable efforts to notify you through the Service and/or by email to the email address associated with your account. You acknowledge that if your access to the Service is suspended or terminated, you may no longer have access to Your Content that is stored with the Service. 8. Acceptable Use \u00b6 You must not use the Service to harm others or the Service. For example, you must not use the Service to harm, threaten, or harass another person, organization, or Textile. You must not: damage, disable, overburden, or impair the Service (or any network connected to the Service); resell or redistribute the Service or any part of it; use any unauthorized means to modify, reroute, or gain access to the Service or attempt to carry out these activities; or use any data mining, robots, or similar data gathering and extraction tools; or use any automated process or Service (such as a bot, a spider, or periodic caching of information stored by Textile) to access or use the Service;. In addition, you promise that you will not and will not encourage or assist any third party to: I. reproduce, modify, alter, tamper with, repair or create derivative works of any Software, unless that permission is granted in a license. Further, unless expressly prohibited under applicable law, you may not use the Service to develop, test, validate and/or improve any service that is a substitute for, or substantially similar to, the Service (including any portion thereof); II. reverse engineer, disassemble or decompile the Software used to provide or access the Service, including the Software, or attempt to discover or recreate the source code used to provide or access the Service, except and only to the extent that that permission is granted in a license or applicable law expressly permits doing so; III. use the Service in any manner or for any purpose other than as expressly permitted by these Terms, the Privacy Policy, any User Guides or any other policy, instruction or terms applicable to the Service that are available on the Service (\u201cPolicies\u201d); IV. sell, lend, rent, resell, lease, sublicense or otherwise transfer any of the rights granted to you with respect to the Services to any third party; V. remove, obscure or alter any proprietary rights notice pertaining to the Service; VI. use the Service in connection with the operation of nuclear facilities, aircraft navigation, communication systems, medical devices, air traffic control devices, real time control systems or other situations in which the failure of the Service could lead to death, personal injury, or physical property or environmental damage; VII. use the Service to: (i) engage in any unlawful or fraudulent activity or perpetrate a hoax or engage in phishing schemes or forgery or other similar falsification or manipulation of data; (ii) send unsolicited or unauthorized junk mail, spam, chain letters, pyramid schemes or any other form of duplicative or unsolicited messages, whether commercial or otherwise; (iii) store or transmit any inappropriate content, such as content: (1) containing unlawful, defamatory, threatening, abusive, libelous or otherwise objectionable material of any kind or nature, (2) containing any material that encourages conduct that could constitute a criminal offense, or (3) in a way that violates or infringes upon the intellectual property rights or the privacy or publicity rights of any person or entity or that may otherwise be unlawful or give rise to civil or criminal liability; (iv) store or transmit any content that contains or is used to initiate a denial of service attack, software viruses or other harmful or deleterious computer code, files or programs such as Trojan horses, worms, time bombs, cancelbots, or spyware; or (v) abuse, harass, stalk or otherwise violate the legal rights of a third party; VIII. interfere with or disrupt servers or networks used by Textile to provide the Service or used by other users\u2019 to access the Service, or violate any third party regulations, policies or procedures of such servers or networks or harass or interfere with another user\u2019s full use and enjoyment of any Software or the Service; IX. access or attempt to access Textile\u2019s other accounts, computer systems or networks not covered by these Terms, through password mining or any other means; X. cause, in Textile\u2019s sole discretion, inordinate burden on the Service or Textile\u2019s system resources or capacity; or XI. share passwords or other access information or devices or otherwise authorize any third party to access or use the Software or the Service. Textile reserves the right, in its sole discretion, to deactivate, change and/or require you to change your Textile user ID and any custom or vanity URLs, custom links, or vanity domains you may obtain through the Services for any reason or for no reason. Textile may exercise such right at any time, with or without prior notice. We will make all judgments concerning the applicability of these guidelines in our sole and exclusive discretion. We reserve the right, in our sole discretion, to determine whether and what action to take in response to each such notification, and any action or inaction in a particular instance will not dictate or limit our response to a future complaint. We will not assume or have any liability for any action or inaction with respect to any Your Content. 9. Updates to the Service \u00b6 Textile reserves the right, in its sole discretion, to make necessary unscheduled deployments of changes, updates or enhancements to the Service at any time. We may add or remove functionalities or features, and we may suspend or stop the Service altogether. 10. Software \u00b6 If you receive Software from us, its use is governed in one of two ways: If you\u2019re presented with license terms that you must accept in order to use the Software, those terms apply; if no license is presented to you, these Terms apply. We reserve all other rights to the Software. We may automatically check your version of the Software. We may also automatically download to your computer or device new versions of the Software. Any Software is licensed, not sold. Unless we notify you otherwise, the Software license ends when your Service ends. You must then promptly uninstall the Software, or we may disable it. You must not work around any technical limitations in the Software. The Software is subject to applicable U.S. export laws and regulations. You must comply with all domestic and international export laws and regulations that apply to the Software. These laws include restrictions on destinations, end users, and end use. Without limitation, you may not transfer the Software or Service without U.S. government permission to anyone on U.S. government exclusion lists (see the Commerce Department\u2019s compliance list at http://www.bis.doc.gov/index.php/policy-guidance/lists-of-parties-of-concern . You represent and warrant that you\u2019re not on any of those lists or under the control of or an agent for anyone on those lists or the entities listed above. 11. Third Party Services and Content \u00b6 All transactions using the Services are between the transacting parties only. The Services may contain features and functionalities linking you or providing you with certain functionality and access to third party content, including Web sites, directories, servers, networks, systems, information and databases, applications, software, programs, products or services, and the Internet as a whole; you acknowledge that we are not responsible for such content or services. We may also provide some content to you as part of the Services. However, Textile is not an agent of any transacting party, nor or we a direct party in any such transaction. Any such activities, and any terms associated with such activities, are solely between you and the applicable third-party. Similarly, we are not responsible for any third party content you access with the Services, and you irrevocably waive any claim against us with respect to such sites and third-party content. Textile shall have no liability, obligation or responsibility for any such correspondence, purchase or promotion between you and any such third-party. You should make whatever investigation you feel necessary or appropriate before proceeding with any online or offline transaction with any of these third parties. You are solely responsible for your dealings with any third party related to the Services, including the delivery of and payment for goods and services. 12. Textile Proprietary Rights \u00b6 As between Textile and you, Textile or its licensors own and reserve all right, title and interest in and to the Service and all hardware, software and other items used to provide the Service, other than the rights explicitly granted to you to use the Service in accordance with this Terms. No title to or ownership of any proprietary rights related to the Service is transferred to you pursuant to these Terms. All rights not explicitly granted to you are reserved by Textile. In the event that you provide comments, suggestions and recommendations to Textile with respect to the Service (including, without limitation, with respect to modifications, enhancements, improvements and other changes to the Service) (collectively, \u201cFeedback\u201d), you hereby grant to Textile a world-wide, royalty free, irrevocable, perpetual license to use and otherwise incorporate any Feedback in connection with the Service. 13. Privacy \u00b6 In order to operate and provide the Service, we collect certain information about you. We use that information as described in the privacy policy located at https://docs.textile.io/policies/privacy (\u201c Privacy Policy \u201d). 14. No Warranty \u00b6 TEXTILE PROVIDES THE SERVICE \u201cAS IS\u201d, \u201cWITH ALL FAULTS\u201d AND \u201cAS AVAILABLE\u201d. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, TEXTILE MAKES NO (AND SPECIFICALLY DISCLAIMS ALL) REPRESENTATIONS OR WARRANTIES OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY THAT THE SERVICE WILL BE UNINTERRUPTED, ERROR-FREE OR FREE OF HARMFUL COMPONENTS, THAT YOUR CONTENT WILL BE SECURE OR NOT OTHERWISE LOST OR DAMAGED, OR ANY IMPLIED WARRANTY OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, AND ANY WARRANTY ARISING OUT OF ANY COURSE OF PERFORMANCE, COURSE OF DEALING OR USAGE OF TRADE. SOME JURISDICTIONS DO NOT ALLOW THE FOREGOING EXCLUSIONS. IN SUCH AN EVENT SUCH EXCLUSION WILL NOT APPLY SOLELY TO THE EXTENT PROHIBITED BY APPLICABLE LAW. You hereby acknowledge and agree that this disclaimer of warranties is a fundamental part of the agreement between you and Textile contained in these Terms and that Textile would not agree to enter these Terms or allow you access or use the Service without such disclaimers. 15. Indemnification \u00b6 You will defend Textile against any cost, loss, damage, or other liability arising from any third party demand or claim that any Your Content, or your use of the Service, in breach of these Terms: (a) infringes a registered patent, registered trademark, or copyright of a third party, or misappropriates a trade secret (to the extent that such misappropriation is not the result of Textile\u2019s actions); or (b) violates applicable law or these Terms. Textile will reasonably notify you of any such claim or demand that is subject to your indemnification obligation. 16. Limitation of Liability \u00b6 TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL TEXTILE, ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS BE LIABLE FOR: ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, PUNITIVE, COVER OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR LOST PROFITS, REVENUE, GOODWILL, USE OR CONTENT, HOWEVER CAUSED, UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, CONTRACT, TORT, WARRANTY, NEGLIGENCE OR OTHERWISE, EVEN IF TEXTILE HAS BEEN ADVISED AS TO THE POSSIBILITY OF SUCH DAMAGES. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THE AGGREGATE LIABILITY OF TEXTILE AND ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS, RELATING TO THE SERVICES WILL BE LIMITED TO FIFTY DOLLARS ($50.00). THE LIMITATIONS AND EXCLUSIONS ALSO APPLY IF THIS REMEDY DOES NOT FULLY COMPENSATE YOU FOR ANY LOSSES OR FAILS OF ITS ESSENTIAL PURPOSE. SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OF INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES. IN SUCH AN EVENT THIS LIMITATION WILL NOT APPLY TO YOU TO THE EXTENT PROHIBITED BY LAW. You acknowledge that the foregoing limitations are an essential element of the agreement between you and Textile and that in the absence of such limitations the terms and conditions set forth in these Terms would be substantially different. 17. Arbitration; Class Action Waiver \u00b6 17.1 Introduction Introduction. This Section 17 includes an arbitration agreement and an agreement that all claims will be brought only in an individual capacity (and not as a class action or other representative proceeding). Please read it carefully. You may opt out of the arbitration agreement by following the opt out procedure described below. 17.2 Process Informal Process First You agree that in the event of any dispute between you and Textile, you will first contact Textile and make a good faith sustained effort to resolve the dispute before resorting to more formal means of resolution, including without limitation any court action. 17.3 Arbitration Agreement After the informal dispute resolution process any remaining dispute, controversy, or claim (collectively, \u201cClaim\u201d) relating in any way to your use of Textile\u2019s services and/or products, including the Service, or relating in any way to the communications between you and Textile or any other user of the Service, will be finally resolved by binding arbitration. This mandatory arbitration agreement applies equally to you and Textile. However, this arbitration agreement does not (a) govern any Claim by Textile for infringement of its intellectual property or access to the Service that is unauthorized or exceeds authorization granted in these Terms or (b) bar you from making use of applicable small claims court procedures in appropriate cases. If you are an individual you may opt out of this arbitration agreement within thirty (30) days of the first date you access or use this Service by following the procedure described below. Arbitration is more informal than a lawsuit in court. There is no judge or jury in arbitration. Instead, the dispute is resolve by a neutral arbitrator. Court review of an arbitration award is limited. Except to the extent the parties agree otherwise, arbitrators can award the same damages and relief that a court can award. You agree that the U.S. Federal Arbitration Act governs the interpretation and enforcement of this provision, and that you and Textile are each waiving the right to a trial by jury or to participate in a class action. This arbitration provision will survive any termination of these Terms. If you wish to begin an arbitration proceeding, after following the informal dispute resolution procedure, you must send a letter requesting arbitration and describing your claim to Textile, Inc., Attn: President, 85 Broad St., 18 th Floor - NY, NY 10004. The arbitration will be administered by the American Arbitration Association (AAA) under its rules including, if you are an individual, the AAA's Supplementary Procedures for Consumer-Related Disputes. If you are not an individual or have used the Services on behalf of an entity, the AAA's Supplementary Procedures for Consumer-Related Disputes will not be used. The AAA's rules are available at www.adr.org or by calling 1-800-778-7879. The number of arbitrators will be one. You may choose to have the arbitration conducted by telephone, based on written submissions, or in person in the county where you live or at another mutually agreed location. The arbitration will be conducted in the English language and California law will apply. Judgment on the award rendered by the arbitrator may be entered in any court having jurisdiction thereof. Payment of all filing, administration and arbitrator fees will be governed by the AAA's rules. If you are an individual and have not accessed or used the Service on behalf of an entity, we will reimburse those fees for claims totaling less than $10,000, unless the arbitrator determines the claims are frivolous, and we will not seek attorneys\u2019 fees and costs in arbitration unless the arbitrator determines the claims are frivolous. The arbitrator, and not any federal, state, or local court, will have exclusive authority to resolve any dispute relating to the interpretation, applicability, unconscionability, arbitrability, enforceability, or formation of this arbitration agreement, including any claim that all or any part of this arbitration agreement is void or voidable. However, the preceding sentence will not apply to the \u201cClass Action Waiver\u201d section below. If you do not want to arbitrate disputes with Textile and you are an individual, you may opt out of this arbitration agreement by sending an email to [ legal@textile.io ] within thirty (30) days of the first date you access or use the Service. CLASS ACTION WAIVER Any Claim must be brought in the respective party\u2019s individual capacity, and not as a plaintiff or class member in any purported class, collective, representative, multiple plaintiff, or similar proceeding (\u201cClass Action\u201d). The parties expressly waive any ability to maintain any Class Action in any forum. If the Claim is subject to arbitration, the arbitrator will not have authority to combine or aggregate similar claims or conduct any Class Action nor make an award to any person or entity not a party to the arbitration. Any claim that all or part of this Class Action Waiver is unenforceable, unconscionable, void, or voidable may be determined only by a court of competent jurisdiction and not by an arbitrator. The parties understand that any right to litigate in court, to have a judge or jury decide their case, or to be a party to a class or representative action, is waived, and that any claims must be decided individually, through arbitration. If this class action waiver is found to be unenforceable, then the entirety of the Arbitration Agreement, if otherwise effective, will be null and void. The arbitrator may award declaratory or injunctive relief only in favor of the individual party seeking relief and only to the extent necessary to provide relief warranted by that party's individual claim. If for any reason a claim proceeds in court rather than in arbitration, you and Textile each waive any right to a jury trial and each submit to the exclusive jurisdiction of the federal courts located in San Francisco, California. 18. Notices \u00b6 We may send you, in electronic form, information about the Service, additional information, and information the law requires us to provide. We may provide required information to you by email at the address you specified when you signed up for the Service or by access to a website that we identify. Notices emailed to you will be deemed given and received when the email is sent. If you don\u2019t consent to receive notices electronically, you must stop using the Service. You may provide legal noticed to us via email to legal@textile.io , with a duplicate copy sent via registered mail, return receipt requested, to the following address: Textile, Attn: President, 206 Jackson Street. Sunnyvale, CA 94086, USA. Any such notice, in either case, must specifically reference that it is a notice given under these Terms. 19. Miscellaneous \u00b6 19.1. Severability; Entire Agreement These Terms apply to the maximum extent permitted by relevant law. If a court holds that we cannot enforce a part of these Terms as written, you and we will replace those terms with similar terms to the extent enforceable under the relevant law, but the rest of these Terms will remain in effect. This is the entire contract between you and us regarding the Service. It supersedes any prior contract or oral or written statements regarding your use of the Service. 19.2. Assignment and transfer We may assign, transfer, or otherwise dispose our rights and obligations under these Terms, in whole or in part, at any time without notice. You may not assign these Terms or transfer any rights to use the Service. 19.3. Independent Contractors; No third-party beneficiaries Textile and you are not legal partners or agents; instead, our relationship is that of independent contractors. These Terms are solely for your and our benefit. It is not for the benefit of any other person, except for permitted successors. 19.4. Claims You must bring any claim related to these Terms or the Service within one year of the date you could first bring the claim, unless your local law requires a longer time to file claims. If it isn\u2019t filed in time, the claim is permanently barred. 19.5. Waiver The failure of you or Textile to insist upon or enforce strict performance of any of the provisions of these Terms or to exercise any rights or remedies under these Terms will not be construed as a waiver or relinquishment to any extent of your right or Textile\u2019s right to assert or rely upon any such provision, right or remedy in that or any other instance; rather, the same will remain in full force and effect. 19.6. Government Use If you are a U.S. government entity, you acknowledge that any Software and User Guides that are provided are \u201cCommercial Items\u201d as defined at 48 C.F.R. 2.101, and are being provided as commercial computer software subject to the restricted rights described in 48 C.F.R. 2.101 and 12.212. 20. Copyright Complaints and Removal Policy \u00b6 We reserve the right to delete or disable Content alleged to violate these Terms and to terminate repeat offenders. 20.1 DMCA Take-down Notices If you are a copyright owner or an agent thereof and believe, in good faith, that any materials on the Service infringe upon your copyrights, you may submit a notification pursuant to the Digital Millennium Copyright Act (see 17 U.S.C. 512) (the \u201cDMCA\u201d) by sending the following information in writing to Textile\u2019s designated copyright agent at [ legal@textile.io ]: (a) The date of your notification; (b) A physical or electronic signature of a person authorized to act on behalf of the owner of an exclusive right that is allegedly infringed; \u00a9 A description of the copyrighted work claimed to have been infringed, or, if multiple copyrighted works at a single online site are covered by a single notification, a representative list of such works at that site; (d) A description of the material that is claimed to be infringing or to be the subject of infringing activity and that is to be removed or access to which is to be disabled, and information reasonably sufficient to enable Textile to locate the material; (e) Information reasonably sufficient to permit Textile to contact you, such as an address, telephone number and/or email address; (f) A statement that you have a good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent or the law; and (g) A statement that the information in the notification is accurate, and under penalty of perjury, that you are authorized to act on behalf of the owner of an exclusive right that is allegedly infringed. The failure to send proper notification pursuant to the DMCA may result in our taking incomplete or no action with respect to the allegedly infringing material described in such improper notification, and under some circumstances may even result in liability to the person(s) submitting such improper notifications. 20.2 Counter-Notices If you believe that your content that has been removed from the Service is not infringing, or that you have authorization from the copyright owner, the copyright owner\u2019s agent or pursuant to the law, to post and use the content, you may send a counter-notice containing the following information to our copyright agent using the contact information set forth above: (i) Your physical or electronic signature; (ii) A description of the content that has been removed and the location at which the content appeared before it was removed; (iii) A statement that you have a good faith belief that the content was removed as a result of mistake or a misidentification of the content; and (iv) Your name, address, telephone number and email address, a statement that you consent to the jurisdiction of the federal court in the Northern District Court of California and a statement that you will accept service of process from the person who provided notification of the alleged infringement. If a counter-notice is received by the Textile copyright agent, Textile may send a copy of the counter-notice to the original complaining party informing such person that it may reinstate the removed content in 10 business days. Unless the copyright owner files an action seeking a court order against the content provider or user, the removed content may (in Textile\u2019s discretion) be reinstated on the Service within 10 to 14 business days after receipt of the counter-notice. 21. Intellectual Property Notices \u00b6 All contents of the Site and Services including but not limited to design, text, software, technical drawings, configurations, graphics, other files, and their selection and arrangement are: Copyright \u00a9 Textile, and/or the proprietary property of its suppliers, affiliates, or licensors. All Rights Reserved. Textile and the Textile logo are including without limitation, either trademarks, service marks or registered trademarks of Textile, Inc., and may not be copied, imitated, or used, in whole or in part, without Textile\u2019s prior written permission or that of our suppliers or licensors. Other product and company names may be trade or service marks of their respective owners. Textile may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter that is part of the Service. Unless we have granted you licenses to our intellectual property in these Terms, our providing you with the Service does not give you any license to our intellectual property. Any rights not expressly granted herein are reserved.","title":"Terms"},{"location":"policies/terms/#1-about-this-service","text":"The Service offers verification and authentication services and encryption services for users. The Service provides a data storage system (\" Storage \") for developers to maintain remote copies of User Content. Storage is managed on IPFS ( https://www.ipfs.io/ ) nodes running on a user's personal device and replicated on remote IPFS nodes maintained by the Company. If you shared User Content which you no longer want to share publicly or privately using our Services, you must either delete that User Content or your Account. By making such deletion, the relevant User Content will become unlinked from the IPFS network and will be deleted from our IPFS node. You agree to immediately notify Company of any unauthorized use, or suspected unauthorized use of your Account or any other breach of security. Company cannot and will not be liable for any loss or damage arising from your failure to comply with the above requirements.","title":"1. About this Service"},{"location":"policies/terms/#2-changes-to-these-terms","text":"We reserve the right to revise these Terms from time to time. We will date and post the most current version of these Terms on the Site. Any changes will be effective upon posting the revised version of these Terms (or such later effective date as may be indicated at the top of the revised Terms). If, in our sole discretion, we deem a revision to these Terms to be material, we will notify you via the Service and/or by email to the email address associated with your account. Notice of other changes may be provided via the Site. Therefore, we encourage you to check the date of these Terms whenever you visit the Site to see if these Terms have been updated. Your continued access or use of any portion of the Service constitutes your acceptance of such changes. If you don\u2019t agree to any of the changes, we\u2019re not obligated to keep providing the Service to you, and you must cancel and stop using the Service.","title":"2. Changes to these Terms"},{"location":"policies/terms/#3-access-to-the-service","text":"You may use the Service, on a non-exclusive basis, solely in strict compliance with these Terms and all applicable laws.","title":"3. Access to the Service"},{"location":"policies/terms/#4-your-account","text":"To obtain access to certain Services, you may be required to obtain an account with Textile (become a \u201c Registered User \u201d). Until you apply for and are approved for an account your access to the Service will be limited to the areas of the Service, if any, that Textile makes available to the general public. When registering with Textile you must: (a) provide true, accurate, current and complete information about yourself as requested by the Service\u2019s registration form (such information being the \u201c Registration Data \u201d); and (b) maintain and promptly update the Registration Data to keep it true, accurate, current and complete. Textile may deny approval or withdraw such approval at any time in its sole discretion, with or without cause. Only you may use your Textile account. You must keep your account and passwords confidential and not authorize any third party to access or use the Service on your behalf, unless we provide an approved mechanism for such use. Textile will not be liable for any loss or damage arising from any unauthorized use of your accounts. CONTENT You represent and warrant that none of the following infringe any intellectual property, publicity or other proprietary rights: your provision of Your Content to us, your causing Your Content to be posted using the Service, and use of any such content (including of works derived from it) by us, other users of the Service, or others in contract with us that is done in connection with the Service and in compliance with these Terms. You acknowledge and agree that we may access or disclose information about you or any other information or data collected, stored or processed on our servers, including Your Content, if required to do so by law or in the good-faith belief that such action is necessary to: (a) comply with any law, regulation, legal process or lawful governmental requests; (b) protect the rights or property of Textile or our customers, including the enforcement of our agreements or policies governing your use of the Service; or \u00a9 act on a good faith belief that such access or disclosure is necessary to protect the personal safety of Textile employees, customers, or the public. We retain the right to block or otherwise prevent delivery of any type of file, email or other communication to or from the Service as part of our efforts to protect the Service, protect our customers, or stop you from breaching these Terms.","title":"4. Your Account"},{"location":"policies/terms/#6-consent-to-electronic-communications-and-solicitation","text":"By registering for the Service, you understand that we may send you communications or data regarding the Services, including but not limited to: (a) notices about your use of the Services, including any notices concerning violations of use; (b) updates; and \u00a9 promotional information and materials regarding Textile\u2019s products and services, via electronic mail. We give you the opportunity to opt-out of receiving promotional electronic mail from us by following the opt-out instructions provided in the message.","title":"6. Consent to Electronic Communications and Solicitation"},{"location":"policies/terms/#7-suspension-and-termination-of-use-of-the-service","text":"We reserve the right, to temporarily suspend or terminate your access to the Service at any time in our sole discretion, with or without cause, with or without notice, and without incurring liability of any kind. For example, we may suspend or terminate your access to or use of the Service for: (a) the actual or suspected violation of these Terms; (b) the use of the Services in a manner that may cause Textile to have legal liability or disrupt others\u2019 use of the Services; \u00a9 the suspicion or detection of any malicious code, virus or other harmful code by you or in your account; (d) scheduled downtime and recurring downtime; (e) any actual or suspected effort by you to circumvent Textile\u2019s security or encryption; or (f) unplanned technical problems and outages. If, in Textile\u2019s determination, the suspension might be indefinite and/or Textile has elected to terminate your access to the Service, Textile will use commercially reasonable efforts to notify you through the Service and/or by email to the email address associated with your account. You acknowledge that if your access to the Service is suspended or terminated, you may no longer have access to Your Content that is stored with the Service.","title":"7. Suspension and Termination of Use of the Service"},{"location":"policies/terms/#8-acceptable-use","text":"You must not use the Service to harm others or the Service. For example, you must not use the Service to harm, threaten, or harass another person, organization, or Textile. You must not: damage, disable, overburden, or impair the Service (or any network connected to the Service); resell or redistribute the Service or any part of it; use any unauthorized means to modify, reroute, or gain access to the Service or attempt to carry out these activities; or use any data mining, robots, or similar data gathering and extraction tools; or use any automated process or Service (such as a bot, a spider, or periodic caching of information stored by Textile) to access or use the Service;. In addition, you promise that you will not and will not encourage or assist any third party to: I. reproduce, modify, alter, tamper with, repair or create derivative works of any Software, unless that permission is granted in a license. Further, unless expressly prohibited under applicable law, you may not use the Service to develop, test, validate and/or improve any service that is a substitute for, or substantially similar to, the Service (including any portion thereof); II. reverse engineer, disassemble or decompile the Software used to provide or access the Service, including the Software, or attempt to discover or recreate the source code used to provide or access the Service, except and only to the extent that that permission is granted in a license or applicable law expressly permits doing so; III. use the Service in any manner or for any purpose other than as expressly permitted by these Terms, the Privacy Policy, any User Guides or any other policy, instruction or terms applicable to the Service that are available on the Service (\u201cPolicies\u201d); IV. sell, lend, rent, resell, lease, sublicense or otherwise transfer any of the rights granted to you with respect to the Services to any third party; V. remove, obscure or alter any proprietary rights notice pertaining to the Service; VI. use the Service in connection with the operation of nuclear facilities, aircraft navigation, communication systems, medical devices, air traffic control devices, real time control systems or other situations in which the failure of the Service could lead to death, personal injury, or physical property or environmental damage; VII. use the Service to: (i) engage in any unlawful or fraudulent activity or perpetrate a hoax or engage in phishing schemes or forgery or other similar falsification or manipulation of data; (ii) send unsolicited or unauthorized junk mail, spam, chain letters, pyramid schemes or any other form of duplicative or unsolicited messages, whether commercial or otherwise; (iii) store or transmit any inappropriate content, such as content: (1) containing unlawful, defamatory, threatening, abusive, libelous or otherwise objectionable material of any kind or nature, (2) containing any material that encourages conduct that could constitute a criminal offense, or (3) in a way that violates or infringes upon the intellectual property rights or the privacy or publicity rights of any person or entity or that may otherwise be unlawful or give rise to civil or criminal liability; (iv) store or transmit any content that contains or is used to initiate a denial of service attack, software viruses or other harmful or deleterious computer code, files or programs such as Trojan horses, worms, time bombs, cancelbots, or spyware; or (v) abuse, harass, stalk or otherwise violate the legal rights of a third party; VIII. interfere with or disrupt servers or networks used by Textile to provide the Service or used by other users\u2019 to access the Service, or violate any third party regulations, policies or procedures of such servers or networks or harass or interfere with another user\u2019s full use and enjoyment of any Software or the Service; IX. access or attempt to access Textile\u2019s other accounts, computer systems or networks not covered by these Terms, through password mining or any other means; X. cause, in Textile\u2019s sole discretion, inordinate burden on the Service or Textile\u2019s system resources or capacity; or XI. share passwords or other access information or devices or otherwise authorize any third party to access or use the Software or the Service. Textile reserves the right, in its sole discretion, to deactivate, change and/or require you to change your Textile user ID and any custom or vanity URLs, custom links, or vanity domains you may obtain through the Services for any reason or for no reason. Textile may exercise such right at any time, with or without prior notice. We will make all judgments concerning the applicability of these guidelines in our sole and exclusive discretion. We reserve the right, in our sole discretion, to determine whether and what action to take in response to each such notification, and any action or inaction in a particular instance will not dictate or limit our response to a future complaint. We will not assume or have any liability for any action or inaction with respect to any Your Content.","title":"8. Acceptable Use"},{"location":"policies/terms/#9-updates-to-the-service","text":"Textile reserves the right, in its sole discretion, to make necessary unscheduled deployments of changes, updates or enhancements to the Service at any time. We may add or remove functionalities or features, and we may suspend or stop the Service altogether.","title":"9. Updates to the Service"},{"location":"policies/terms/#10-software","text":"If you receive Software from us, its use is governed in one of two ways: If you\u2019re presented with license terms that you must accept in order to use the Software, those terms apply; if no license is presented to you, these Terms apply. We reserve all other rights to the Software. We may automatically check your version of the Software. We may also automatically download to your computer or device new versions of the Software. Any Software is licensed, not sold. Unless we notify you otherwise, the Software license ends when your Service ends. You must then promptly uninstall the Software, or we may disable it. You must not work around any technical limitations in the Software. The Software is subject to applicable U.S. export laws and regulations. You must comply with all domestic and international export laws and regulations that apply to the Software. These laws include restrictions on destinations, end users, and end use. Without limitation, you may not transfer the Software or Service without U.S. government permission to anyone on U.S. government exclusion lists (see the Commerce Department\u2019s compliance list at http://www.bis.doc.gov/index.php/policy-guidance/lists-of-parties-of-concern . You represent and warrant that you\u2019re not on any of those lists or under the control of or an agent for anyone on those lists or the entities listed above.","title":"10. Software"},{"location":"policies/terms/#11-third-party-services-and-content","text":"All transactions using the Services are between the transacting parties only. The Services may contain features and functionalities linking you or providing you with certain functionality and access to third party content, including Web sites, directories, servers, networks, systems, information and databases, applications, software, programs, products or services, and the Internet as a whole; you acknowledge that we are not responsible for such content or services. We may also provide some content to you as part of the Services. However, Textile is not an agent of any transacting party, nor or we a direct party in any such transaction. Any such activities, and any terms associated with such activities, are solely between you and the applicable third-party. Similarly, we are not responsible for any third party content you access with the Services, and you irrevocably waive any claim against us with respect to such sites and third-party content. Textile shall have no liability, obligation or responsibility for any such correspondence, purchase or promotion between you and any such third-party. You should make whatever investigation you feel necessary or appropriate before proceeding with any online or offline transaction with any of these third parties. You are solely responsible for your dealings with any third party related to the Services, including the delivery of and payment for goods and services.","title":"11. Third Party Services and Content"},{"location":"policies/terms/#12-textile-proprietary-rights","text":"As between Textile and you, Textile or its licensors own and reserve all right, title and interest in and to the Service and all hardware, software and other items used to provide the Service, other than the rights explicitly granted to you to use the Service in accordance with this Terms. No title to or ownership of any proprietary rights related to the Service is transferred to you pursuant to these Terms. All rights not explicitly granted to you are reserved by Textile. In the event that you provide comments, suggestions and recommendations to Textile with respect to the Service (including, without limitation, with respect to modifications, enhancements, improvements and other changes to the Service) (collectively, \u201cFeedback\u201d), you hereby grant to Textile a world-wide, royalty free, irrevocable, perpetual license to use and otherwise incorporate any Feedback in connection with the Service.","title":"12. Textile Proprietary Rights"},{"location":"policies/terms/#13-privacy","text":"In order to operate and provide the Service, we collect certain information about you. We use that information as described in the privacy policy located at https://docs.textile.io/policies/privacy (\u201c Privacy Policy \u201d).","title":"13. Privacy"},{"location":"policies/terms/#14-no-warranty","text":"TEXTILE PROVIDES THE SERVICE \u201cAS IS\u201d, \u201cWITH ALL FAULTS\u201d AND \u201cAS AVAILABLE\u201d. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, TEXTILE MAKES NO (AND SPECIFICALLY DISCLAIMS ALL) REPRESENTATIONS OR WARRANTIES OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY THAT THE SERVICE WILL BE UNINTERRUPTED, ERROR-FREE OR FREE OF HARMFUL COMPONENTS, THAT YOUR CONTENT WILL BE SECURE OR NOT OTHERWISE LOST OR DAMAGED, OR ANY IMPLIED WARRANTY OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, AND ANY WARRANTY ARISING OUT OF ANY COURSE OF PERFORMANCE, COURSE OF DEALING OR USAGE OF TRADE. SOME JURISDICTIONS DO NOT ALLOW THE FOREGOING EXCLUSIONS. IN SUCH AN EVENT SUCH EXCLUSION WILL NOT APPLY SOLELY TO THE EXTENT PROHIBITED BY APPLICABLE LAW. You hereby acknowledge and agree that this disclaimer of warranties is a fundamental part of the agreement between you and Textile contained in these Terms and that Textile would not agree to enter these Terms or allow you access or use the Service without such disclaimers.","title":"14. No Warranty"},{"location":"policies/terms/#15-indemnification","text":"You will defend Textile against any cost, loss, damage, or other liability arising from any third party demand or claim that any Your Content, or your use of the Service, in breach of these Terms: (a) infringes a registered patent, registered trademark, or copyright of a third party, or misappropriates a trade secret (to the extent that such misappropriation is not the result of Textile\u2019s actions); or (b) violates applicable law or these Terms. Textile will reasonably notify you of any such claim or demand that is subject to your indemnification obligation.","title":"15. Indemnification"},{"location":"policies/terms/#16-limitation-of-liability","text":"TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL TEXTILE, ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS BE LIABLE FOR: ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, PUNITIVE, COVER OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR LOST PROFITS, REVENUE, GOODWILL, USE OR CONTENT, HOWEVER CAUSED, UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, CONTRACT, TORT, WARRANTY, NEGLIGENCE OR OTHERWISE, EVEN IF TEXTILE HAS BEEN ADVISED AS TO THE POSSIBILITY OF SUCH DAMAGES. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THE AGGREGATE LIABILITY OF TEXTILE AND ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS, RELATING TO THE SERVICES WILL BE LIMITED TO FIFTY DOLLARS ($50.00). THE LIMITATIONS AND EXCLUSIONS ALSO APPLY IF THIS REMEDY DOES NOT FULLY COMPENSATE YOU FOR ANY LOSSES OR FAILS OF ITS ESSENTIAL PURPOSE. SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OF INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES. IN SUCH AN EVENT THIS LIMITATION WILL NOT APPLY TO YOU TO THE EXTENT PROHIBITED BY LAW. You acknowledge that the foregoing limitations are an essential element of the agreement between you and Textile and that in the absence of such limitations the terms and conditions set forth in these Terms would be substantially different.","title":"16. Limitation of Liability"},{"location":"policies/terms/#17-arbitration-class-action-waiver","text":"17.1 Introduction Introduction. This Section 17 includes an arbitration agreement and an agreement that all claims will be brought only in an individual capacity (and not as a class action or other representative proceeding). Please read it carefully. You may opt out of the arbitration agreement by following the opt out procedure described below. 17.2 Process Informal Process First You agree that in the event of any dispute between you and Textile, you will first contact Textile and make a good faith sustained effort to resolve the dispute before resorting to more formal means of resolution, including without limitation any court action. 17.3 Arbitration Agreement After the informal dispute resolution process any remaining dispute, controversy, or claim (collectively, \u201cClaim\u201d) relating in any way to your use of Textile\u2019s services and/or products, including the Service, or relating in any way to the communications between you and Textile or any other user of the Service, will be finally resolved by binding arbitration. This mandatory arbitration agreement applies equally to you and Textile. However, this arbitration agreement does not (a) govern any Claim by Textile for infringement of its intellectual property or access to the Service that is unauthorized or exceeds authorization granted in these Terms or (b) bar you from making use of applicable small claims court procedures in appropriate cases. If you are an individual you may opt out of this arbitration agreement within thirty (30) days of the first date you access or use this Service by following the procedure described below. Arbitration is more informal than a lawsuit in court. There is no judge or jury in arbitration. Instead, the dispute is resolve by a neutral arbitrator. Court review of an arbitration award is limited. Except to the extent the parties agree otherwise, arbitrators can award the same damages and relief that a court can award. You agree that the U.S. Federal Arbitration Act governs the interpretation and enforcement of this provision, and that you and Textile are each waiving the right to a trial by jury or to participate in a class action. This arbitration provision will survive any termination of these Terms. If you wish to begin an arbitration proceeding, after following the informal dispute resolution procedure, you must send a letter requesting arbitration and describing your claim to Textile, Inc., Attn: President, 85 Broad St., 18 th Floor - NY, NY 10004. The arbitration will be administered by the American Arbitration Association (AAA) under its rules including, if you are an individual, the AAA's Supplementary Procedures for Consumer-Related Disputes. If you are not an individual or have used the Services on behalf of an entity, the AAA's Supplementary Procedures for Consumer-Related Disputes will not be used. The AAA's rules are available at www.adr.org or by calling 1-800-778-7879. The number of arbitrators will be one. You may choose to have the arbitration conducted by telephone, based on written submissions, or in person in the county where you live or at another mutually agreed location. The arbitration will be conducted in the English language and California law will apply. Judgment on the award rendered by the arbitrator may be entered in any court having jurisdiction thereof. Payment of all filing, administration and arbitrator fees will be governed by the AAA's rules. If you are an individual and have not accessed or used the Service on behalf of an entity, we will reimburse those fees for claims totaling less than $10,000, unless the arbitrator determines the claims are frivolous, and we will not seek attorneys\u2019 fees and costs in arbitration unless the arbitrator determines the claims are frivolous. The arbitrator, and not any federal, state, or local court, will have exclusive authority to resolve any dispute relating to the interpretation, applicability, unconscionability, arbitrability, enforceability, or formation of this arbitration agreement, including any claim that all or any part of this arbitration agreement is void or voidable. However, the preceding sentence will not apply to the \u201cClass Action Waiver\u201d section below. If you do not want to arbitrate disputes with Textile and you are an individual, you may opt out of this arbitration agreement by sending an email to [ legal@textile.io ] within thirty (30) days of the first date you access or use the Service. CLASS ACTION WAIVER Any Claim must be brought in the respective party\u2019s individual capacity, and not as a plaintiff or class member in any purported class, collective, representative, multiple plaintiff, or similar proceeding (\u201cClass Action\u201d). The parties expressly waive any ability to maintain any Class Action in any forum. If the Claim is subject to arbitration, the arbitrator will not have authority to combine or aggregate similar claims or conduct any Class Action nor make an award to any person or entity not a party to the arbitration. Any claim that all or part of this Class Action Waiver is unenforceable, unconscionable, void, or voidable may be determined only by a court of competent jurisdiction and not by an arbitrator. The parties understand that any right to litigate in court, to have a judge or jury decide their case, or to be a party to a class or representative action, is waived, and that any claims must be decided individually, through arbitration. If this class action waiver is found to be unenforceable, then the entirety of the Arbitration Agreement, if otherwise effective, will be null and void. The arbitrator may award declaratory or injunctive relief only in favor of the individual party seeking relief and only to the extent necessary to provide relief warranted by that party's individual claim. If for any reason a claim proceeds in court rather than in arbitration, you and Textile each waive any right to a jury trial and each submit to the exclusive jurisdiction of the federal courts located in San Francisco, California.","title":"17. Arbitration; Class Action Waiver"},{"location":"policies/terms/#18-notices","text":"We may send you, in electronic form, information about the Service, additional information, and information the law requires us to provide. We may provide required information to you by email at the address you specified when you signed up for the Service or by access to a website that we identify. Notices emailed to you will be deemed given and received when the email is sent. If you don\u2019t consent to receive notices electronically, you must stop using the Service. You may provide legal noticed to us via email to legal@textile.io , with a duplicate copy sent via registered mail, return receipt requested, to the following address: Textile, Attn: President, 206 Jackson Street. Sunnyvale, CA 94086, USA. Any such notice, in either case, must specifically reference that it is a notice given under these Terms.","title":"18. Notices"},{"location":"policies/terms/#19-miscellaneous","text":"19.1. Severability; Entire Agreement These Terms apply to the maximum extent permitted by relevant law. If a court holds that we cannot enforce a part of these Terms as written, you and we will replace those terms with similar terms to the extent enforceable under the relevant law, but the rest of these Terms will remain in effect. This is the entire contract between you and us regarding the Service. It supersedes any prior contract or oral or written statements regarding your use of the Service. 19.2. Assignment and transfer We may assign, transfer, or otherwise dispose our rights and obligations under these Terms, in whole or in part, at any time without notice. You may not assign these Terms or transfer any rights to use the Service. 19.3. Independent Contractors; No third-party beneficiaries Textile and you are not legal partners or agents; instead, our relationship is that of independent contractors. These Terms are solely for your and our benefit. It is not for the benefit of any other person, except for permitted successors. 19.4. Claims You must bring any claim related to these Terms or the Service within one year of the date you could first bring the claim, unless your local law requires a longer time to file claims. If it isn\u2019t filed in time, the claim is permanently barred. 19.5. Waiver The failure of you or Textile to insist upon or enforce strict performance of any of the provisions of these Terms or to exercise any rights or remedies under these Terms will not be construed as a waiver or relinquishment to any extent of your right or Textile\u2019s right to assert or rely upon any such provision, right or remedy in that or any other instance; rather, the same will remain in full force and effect. 19.6. Government Use If you are a U.S. government entity, you acknowledge that any Software and User Guides that are provided are \u201cCommercial Items\u201d as defined at 48 C.F.R. 2.101, and are being provided as commercial computer software subject to the restricted rights described in 48 C.F.R. 2.101 and 12.212.","title":"19. Miscellaneous"},{"location":"policies/terms/#20-copyright-complaints-and-removal-policy","text":"We reserve the right to delete or disable Content alleged to violate these Terms and to terminate repeat offenders. 20.1 DMCA Take-down Notices If you are a copyright owner or an agent thereof and believe, in good faith, that any materials on the Service infringe upon your copyrights, you may submit a notification pursuant to the Digital Millennium Copyright Act (see 17 U.S.C. 512) (the \u201cDMCA\u201d) by sending the following information in writing to Textile\u2019s designated copyright agent at [ legal@textile.io ]: (a) The date of your notification; (b) A physical or electronic signature of a person authorized to act on behalf of the owner of an exclusive right that is allegedly infringed; \u00a9 A description of the copyrighted work claimed to have been infringed, or, if multiple copyrighted works at a single online site are covered by a single notification, a representative list of such works at that site; (d) A description of the material that is claimed to be infringing or to be the subject of infringing activity and that is to be removed or access to which is to be disabled, and information reasonably sufficient to enable Textile to locate the material; (e) Information reasonably sufficient to permit Textile to contact you, such as an address, telephone number and/or email address; (f) A statement that you have a good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent or the law; and (g) A statement that the information in the notification is accurate, and under penalty of perjury, that you are authorized to act on behalf of the owner of an exclusive right that is allegedly infringed. The failure to send proper notification pursuant to the DMCA may result in our taking incomplete or no action with respect to the allegedly infringing material described in such improper notification, and under some circumstances may even result in liability to the person(s) submitting such improper notifications. 20.2 Counter-Notices If you believe that your content that has been removed from the Service is not infringing, or that you have authorization from the copyright owner, the copyright owner\u2019s agent or pursuant to the law, to post and use the content, you may send a counter-notice containing the following information to our copyright agent using the contact information set forth above: (i) Your physical or electronic signature; (ii) A description of the content that has been removed and the location at which the content appeared before it was removed; (iii) A statement that you have a good faith belief that the content was removed as a result of mistake or a misidentification of the content; and (iv) Your name, address, telephone number and email address, a statement that you consent to the jurisdiction of the federal court in the Northern District Court of California and a statement that you will accept service of process from the person who provided notification of the alleged infringement. If a counter-notice is received by the Textile copyright agent, Textile may send a copy of the counter-notice to the original complaining party informing such person that it may reinstate the removed content in 10 business days. Unless the copyright owner files an action seeking a court order against the content provider or user, the removed content may (in Textile\u2019s discretion) be reinstated on the Service within 10 to 14 business days after receipt of the counter-notice.","title":"20. Copyright Complaints and Removal Policy"},{"location":"policies/terms/#21-intellectual-property-notices","text":"All contents of the Site and Services including but not limited to design, text, software, technical drawings, configurations, graphics, other files, and their selection and arrangement are: Copyright \u00a9 Textile, and/or the proprietary property of its suppliers, affiliates, or licensors. All Rights Reserved. Textile and the Textile logo are including without limitation, either trademarks, service marks or registered trademarks of Textile, Inc., and may not be copied, imitated, or used, in whole or in part, without Textile\u2019s prior written permission or that of our suppliers or licensors. Other product and company names may be trade or service marks of their respective owners. Textile may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter that is part of the Service. Unless we have granted you licenses to our intellectual property in these Terms, our providing you with the Service does not give you any license to our intellectual property. Any rights not expressly granted herein are reserved.","title":"21. Intellectual Property Notices"},{"location":"powergate/introduction/","text":"Introduction to the Powergate \u00b6 The Powergate is an API driven solution for deploying multitiered storage across Filecoin and IPFS. Persistent storage on Filecoin allows rich storage configuration for data such as replication factor, miner selection, deal renewal, and repair. Network available storage is configurable and provided through a connected IPFS peer or pinning network. The Powergate allows you to do magical things with Filecoin. Look out for updates soon! For now, follow the project on our blog and on our GitHub repo and give us your feedback. Preview \u00b6 The above video shows the Powergate startup including IPFS and Lotus nodes. Next, the admin uses the Powergate CLI to create a deal on the Filecoin network.","title":"Introduction"},{"location":"powergate/introduction/#introduction-to-the-powergate","text":"The Powergate is an API driven solution for deploying multitiered storage across Filecoin and IPFS. Persistent storage on Filecoin allows rich storage configuration for data such as replication factor, miner selection, deal renewal, and repair. Network available storage is configurable and provided through a connected IPFS peer or pinning network. The Powergate allows you to do magical things with Filecoin. Look out for updates soon! For now, follow the project on our blog and on our GitHub repo and give us your feedback.","title":"Introduction to the Powergate"},{"location":"powergate/introduction/#preview","text":"The above video shows the Powergate startup including IPFS and Lotus nodes. Next, the admin uses the Powergate CLI to create a deal on the Filecoin network.","title":"Preview"},{"location":"threads/introduction/","text":"Getting Started \u00b6 ThreadsDB is a serverless p2p database built on IPFS and Libp2p . Together, the Threads Protocol and Database provide an alternative architecture for data on the web. ThreadsDB aims to help power a new generation of web technologies by combining a novel use of event sourcing, Interplanetary Linked Data ( IPLD ), and access control to provide a distributed, scalable, and flexible database solution for decentralized applications. Developer API \u00b6 ThreadsDB is designed to be simple enough for any developer to start using. The API will feel familiar to developers who have worked with technologies like MongoDB or Mongoose. The first three concepts a developer will encounter with ThreadsDB are Databases , Collections , and Instances . The organization is simple. Instances are the individual records you create, update, or delete. Instances are stored in a Collection. Collections have one or many Schemas and can only store Instances that match one of those Schemas. Databases can store many Collections. ThreadsDB supports Mongodb/Mongoose style search. In the JavaScript library, you might write queries like the following. Players . find ( { $and : [ { points : { $gt : 10 } }, { points : { $lt : 20 } }, { team : 'Astronauts' } ] }, { sort : { points : - 1 }} ) Multi-user Databases \u00b6 Everything above just looks like a Database, so what's a Thread? ThreadsDB combines the storage and management of data (the Database) with networking, access control, and replication over IPFS using the Threads Protocol. The Threads protocol has been extensively documented in the whitepaper , but in short, Threads use private-key encryption to manage both security and identity among multiple parties that can access or edit the same Database. Jump to Thread Networking to read more. Replication with the Hub \u00b6 ThreadsDB has been designed to support trustless peers on the network to provide services that improve or enhance performance and experience for end-users. The Hub offers Thread Services for relay, replication, and backup that you can add for your users in a couple of minutes. Connect to the Hub \u00b6 Create an Account Create an App Token Add the Textile Library to your App ThreadsDB \u00b6 Basic Usage \u00b6 Databases \u00b6 A Thread-based Database is tied to a single Thread (with associated Thread ID). A Database is an Event Emitter (in the Nodejs sense), and Listeners can subscribe to Events using 'wildcard' syntax via the EventEmitter2 library. To start an empty database is simple. import { Database } from '@textile/threads-database' const db = new Database (...) Collections \u00b6 To handle different data structures, a Database contains Collections, each of which are defined by a json-schema.org schema. These schemas define the 'shape' of Collection Instances. Collections implement a Store with JSON Patch semantics by default, but will be made to support other types (CRDT-driven documents for instance) in the future (some of which are already under active development). Ultimately, a Collection is a Store with a set of APIs to make it feel like a local database table . import { Database } from '@textile/threads-database' const db = new Database (...) const Collection = await db . newCollectionFromObject ( 'Players' , { ID : '' , team : '' , name : '' , points : 0 , }) // This will listen to any and all event types on Players db . on ( 'Players.**' , update => { console . log ( update ) }) Instances \u00b6 Instances are the objects you store in your Collection. Instances are JSON documents with schemas that match those defined in your Collection. Creating and manipulating them is simple. const beth = new Collection ({ ID : 'id-i1' , name : 'Beth' }) // This is not yet persisted await beth . save () // Save changes // Modify the `beth` instance beth . points = 1 await beth . save () // Save changes // Modify it again beth . team = 'Astronauts' beth . points = 2 // Save it from the Collection await Collection . save ( i1 ) // Delete it from the Collection await Collection . delete ( i1 . ID ) Query \u00b6 Each Threads implementation supports query and look-up capabilities such as insert , findOne , has , and more. Threads also supports Mongodb/Mongoose style search, find . const Players = new Collection < Player > ( 'players' , {}) // Anything goes schema await Players . insert ( { ID : '' , points : 11 , team : 'Astronauts' : name : 'beth' }, { ID : '' , points : 1 , team : 'Astronauts' : name : 'jim' }, { ID : '' , points : 18 , team : 'Astronauts' : name : 'issac' }, { ID : '' , points : 7 , team : 'Astronauts' : name : 'beth' }, ) const all = Players . find ({ $or : [{ points : { $gt : 10 } }, { name : 'jim' }] }, { sort : { points : - 1 } }) for await ( const { key , value } of all ) { console . log ( value ) } Transactions \u00b6 Collections support (basic) read and write Transactions. These are lockable, key-based 'states' that you can put the Collection into, so that anything else that wants to write to the Collection must await for the Transaction to complete. Transactions do not yet provide isolation, though they do provide atomic update semantics. Subscriptions \u00b6 Subscriptions can be created on the different forms of updates on a Collection (CREATE, SAVE, DELETE, ALL). These events will trigger for both local changes and changes that occur from network based peers with access to the Database. Networking \u00b6 Multiuser Threads \u00b6 The following end-to-end example of exchanging data between two peers provides a good idea of the APIs that developers can use to connect multiple users to the same database. Behind the scenes, ThreadsDB uses a combination of protocols to help connect and syncronize users on the network under most conditions. import { Multiaddr , ThreadID , Variant } from '@textile/threads-core' import { Database } from '@textile/threads-database' import { DomainDatastore } from '@textile/threads-store' import { MemoryDatastore , Key } from 'interface-datastore' import LevelDatastore from 'datastore-level' interface DummyEntity { ID : string name : string counter : number } // Peer 1: Create db1, register a collection, create and update an instance. const d1 = new Database (...) await d1 . open () const id1 = d1 . threadID if ( id1 === undefined ) { throw new Error ( 'should not be invalid thread id' ) } // Create a new collection const Dummy1 = await d1 . newCollectionFromObject < DummyEntity > ( 'dummy' , { ID : '' , name : '' , counter : 0 , }) // Get peer1 database information (addr, id, keys, etc) const dbInfo = await d1 . dbInfo () // Peer 2: Create a completely parallel db2, which will sync with the previous one and should // have the same state of dummy. This one will be manually 'built' from sub-components, // just to show how it can be done! const info = await d1 . service . getThread ( id1 ) const datastore = new MemoryDatastore () const client = new Client ({ host : 'http://127.0.0.1:6207' }) const service = new Network ( new DomainDatastore ( datastore , new Key ( 'service' )), client ) const test = await service . getHostID () const d2 = await Database . fromAddress ( dbInfo . addr , info . key , datastore , { service , }) // Create parallel collection const Dummy2 = await d2 . newCollectionFromObject < DummyEntity > ( 'dummy' , { ID : '' , name : '' , counter : 0 , }) const dummy1 = new Dummy1 ({ name : 'Textile' , counter : 0 }) dummy1 . counter += 42 await dummy1 . save () // wait about 5 seconds? const dummy2 = await Dummy2 . findById ( dummy1 . ID ) console . log ( dummy2 . name === dummy1 . name ) console . log ( dummy2 . counter === dummy1 . counter ) await d1 . close () await d2 . close () That's it! Two completely separate database instances, syncing encrypted and signed data across the network! Access-control \u00b6 ThreadsDB has a modular ACL system that will allow ACLs to be declared in a wide-variety of ways. ACLs are in active development and you can follow the development here . Identity \u00b6 ThreadsDB allows you to handle user identities in the best way for your app and your users. We include examples here that use private-key identities from Libp2p as well as 3Box identities. Pinning, Relay, and Replication \u00b6 Thread Services (e.g. pinning encrypted data on IPFS and helping multiple peers relay updates across the network) can be built and deployed to the network using go-threads . Textile offers a number of these functions through the Hub. Attaching the Hub to your databases will allow you to deliver a high-quality user-experience. See more Local Daemon \u00b6 The Threads Daemon may be helpful to developers that aim to build their own Thread services, host replication services, or test advanced Thread usage. The Threads Daemon ( threadsd ) is provided as an installable binary with every release of Threads . Installation \u00b6 ThreadsDB can be used from many different languages and has libraries written in Javascript, Go, and Dart. Find documentatin on each of those Libraries below. JavaScript Add Threads to NodeJS, React Native or browser apps. Golang Use Threads in Go or compile to many other platforms. Dart Use a lightweight client library in Dart and Flutter. Advanced Details \u00b6 The protocols and design of ThreadsDB can be explored in detail in the whitepaper: A protocol & event-sourced database for decentralized user-siloed data . For futher technical details. the reference implementation of Threads is written in Go and the full implementation details can be found on godocs .","title":"Introduction"},{"location":"threads/introduction/#getting-started","text":"ThreadsDB is a serverless p2p database built on IPFS and Libp2p . Together, the Threads Protocol and Database provide an alternative architecture for data on the web. ThreadsDB aims to help power a new generation of web technologies by combining a novel use of event sourcing, Interplanetary Linked Data ( IPLD ), and access control to provide a distributed, scalable, and flexible database solution for decentralized applications.","title":"Getting Started"},{"location":"threads/introduction/#developer-api","text":"ThreadsDB is designed to be simple enough for any developer to start using. The API will feel familiar to developers who have worked with technologies like MongoDB or Mongoose. The first three concepts a developer will encounter with ThreadsDB are Databases , Collections , and Instances . The organization is simple. Instances are the individual records you create, update, or delete. Instances are stored in a Collection. Collections have one or many Schemas and can only store Instances that match one of those Schemas. Databases can store many Collections. ThreadsDB supports Mongodb/Mongoose style search. In the JavaScript library, you might write queries like the following. Players . find ( { $and : [ { points : { $gt : 10 } }, { points : { $lt : 20 } }, { team : 'Astronauts' } ] }, { sort : { points : - 1 }} )","title":"Developer API"},{"location":"threads/introduction/#multi-user-databases","text":"Everything above just looks like a Database, so what's a Thread? ThreadsDB combines the storage and management of data (the Database) with networking, access control, and replication over IPFS using the Threads Protocol. The Threads protocol has been extensively documented in the whitepaper , but in short, Threads use private-key encryption to manage both security and identity among multiple parties that can access or edit the same Database. Jump to Thread Networking to read more.","title":"Multi-user Databases"},{"location":"threads/introduction/#replication-with-the-hub","text":"ThreadsDB has been designed to support trustless peers on the network to provide services that improve or enhance performance and experience for end-users. The Hub offers Thread Services for relay, replication, and backup that you can add for your users in a couple of minutes.","title":"Replication with the Hub"},{"location":"threads/introduction/#connect-to-the-hub","text":"Create an Account Create an App Token Add the Textile Library to your App","title":"Connect to the Hub"},{"location":"threads/introduction/#threadsdb","text":"","title":"ThreadsDB"},{"location":"threads/introduction/#basic-usage","text":"","title":"Basic Usage"},{"location":"threads/introduction/#databases","text":"A Thread-based Database is tied to a single Thread (with associated Thread ID). A Database is an Event Emitter (in the Nodejs sense), and Listeners can subscribe to Events using 'wildcard' syntax via the EventEmitter2 library. To start an empty database is simple. import { Database } from '@textile/threads-database' const db = new Database (...)","title":"Databases"},{"location":"threads/introduction/#collections","text":"To handle different data structures, a Database contains Collections, each of which are defined by a json-schema.org schema. These schemas define the 'shape' of Collection Instances. Collections implement a Store with JSON Patch semantics by default, but will be made to support other types (CRDT-driven documents for instance) in the future (some of which are already under active development). Ultimately, a Collection is a Store with a set of APIs to make it feel like a local database table . import { Database } from '@textile/threads-database' const db = new Database (...) const Collection = await db . newCollectionFromObject ( 'Players' , { ID : '' , team : '' , name : '' , points : 0 , }) // This will listen to any and all event types on Players db . on ( 'Players.**' , update => { console . log ( update ) })","title":"Collections"},{"location":"threads/introduction/#instances","text":"Instances are the objects you store in your Collection. Instances are JSON documents with schemas that match those defined in your Collection. Creating and manipulating them is simple. const beth = new Collection ({ ID : 'id-i1' , name : 'Beth' }) // This is not yet persisted await beth . save () // Save changes // Modify the `beth` instance beth . points = 1 await beth . save () // Save changes // Modify it again beth . team = 'Astronauts' beth . points = 2 // Save it from the Collection await Collection . save ( i1 ) // Delete it from the Collection await Collection . delete ( i1 . ID )","title":"Instances"},{"location":"threads/introduction/#query","text":"Each Threads implementation supports query and look-up capabilities such as insert , findOne , has , and more. Threads also supports Mongodb/Mongoose style search, find . const Players = new Collection < Player > ( 'players' , {}) // Anything goes schema await Players . insert ( { ID : '' , points : 11 , team : 'Astronauts' : name : 'beth' }, { ID : '' , points : 1 , team : 'Astronauts' : name : 'jim' }, { ID : '' , points : 18 , team : 'Astronauts' : name : 'issac' }, { ID : '' , points : 7 , team : 'Astronauts' : name : 'beth' }, ) const all = Players . find ({ $or : [{ points : { $gt : 10 } }, { name : 'jim' }] }, { sort : { points : - 1 } }) for await ( const { key , value } of all ) { console . log ( value ) }","title":"Query"},{"location":"threads/introduction/#transactions","text":"Collections support (basic) read and write Transactions. These are lockable, key-based 'states' that you can put the Collection into, so that anything else that wants to write to the Collection must await for the Transaction to complete. Transactions do not yet provide isolation, though they do provide atomic update semantics.","title":"Transactions"},{"location":"threads/introduction/#subscriptions","text":"Subscriptions can be created on the different forms of updates on a Collection (CREATE, SAVE, DELETE, ALL). These events will trigger for both local changes and changes that occur from network based peers with access to the Database.","title":"Subscriptions"},{"location":"threads/introduction/#networking","text":"","title":"Networking"},{"location":"threads/introduction/#multiuser-threads","text":"The following end-to-end example of exchanging data between two peers provides a good idea of the APIs that developers can use to connect multiple users to the same database. Behind the scenes, ThreadsDB uses a combination of protocols to help connect and syncronize users on the network under most conditions. import { Multiaddr , ThreadID , Variant } from '@textile/threads-core' import { Database } from '@textile/threads-database' import { DomainDatastore } from '@textile/threads-store' import { MemoryDatastore , Key } from 'interface-datastore' import LevelDatastore from 'datastore-level' interface DummyEntity { ID : string name : string counter : number } // Peer 1: Create db1, register a collection, create and update an instance. const d1 = new Database (...) await d1 . open () const id1 = d1 . threadID if ( id1 === undefined ) { throw new Error ( 'should not be invalid thread id' ) } // Create a new collection const Dummy1 = await d1 . newCollectionFromObject < DummyEntity > ( 'dummy' , { ID : '' , name : '' , counter : 0 , }) // Get peer1 database information (addr, id, keys, etc) const dbInfo = await d1 . dbInfo () // Peer 2: Create a completely parallel db2, which will sync with the previous one and should // have the same state of dummy. This one will be manually 'built' from sub-components, // just to show how it can be done! const info = await d1 . service . getThread ( id1 ) const datastore = new MemoryDatastore () const client = new Client ({ host : 'http://127.0.0.1:6207' }) const service = new Network ( new DomainDatastore ( datastore , new Key ( 'service' )), client ) const test = await service . getHostID () const d2 = await Database . fromAddress ( dbInfo . addr , info . key , datastore , { service , }) // Create parallel collection const Dummy2 = await d2 . newCollectionFromObject < DummyEntity > ( 'dummy' , { ID : '' , name : '' , counter : 0 , }) const dummy1 = new Dummy1 ({ name : 'Textile' , counter : 0 }) dummy1 . counter += 42 await dummy1 . save () // wait about 5 seconds? const dummy2 = await Dummy2 . findById ( dummy1 . ID ) console . log ( dummy2 . name === dummy1 . name ) console . log ( dummy2 . counter === dummy1 . counter ) await d1 . close () await d2 . close () That's it! Two completely separate database instances, syncing encrypted and signed data across the network!","title":"Multiuser Threads"},{"location":"threads/introduction/#access-control","text":"ThreadsDB has a modular ACL system that will allow ACLs to be declared in a wide-variety of ways. ACLs are in active development and you can follow the development here .","title":"Access-control"},{"location":"threads/introduction/#identity","text":"ThreadsDB allows you to handle user identities in the best way for your app and your users. We include examples here that use private-key identities from Libp2p as well as 3Box identities.","title":"Identity"},{"location":"threads/introduction/#pinning-relay-and-replication","text":"Thread Services (e.g. pinning encrypted data on IPFS and helping multiple peers relay updates across the network) can be built and deployed to the network using go-threads . Textile offers a number of these functions through the Hub. Attaching the Hub to your databases will allow you to deliver a high-quality user-experience. See more","title":"Pinning, Relay, and Replication"},{"location":"threads/introduction/#local-daemon","text":"The Threads Daemon may be helpful to developers that aim to build their own Thread services, host replication services, or test advanced Thread usage. The Threads Daemon ( threadsd ) is provided as an installable binary with every release of Threads .","title":"Local Daemon"},{"location":"threads/introduction/#installation","text":"ThreadsDB can be used from many different languages and has libraries written in Javascript, Go, and Dart. Find documentatin on each of those Libraries below.","title":"Installation"},{"location":"threads/introduction/#advanced-details","text":"The protocols and design of ThreadsDB can be explored in detail in the whitepaper: A protocol & event-sourced database for decentralized user-siloed data . For futher technical details. the reference implementation of Threads is written in Go and the full implementation details can be found on godocs .","title":"Advanced Details"},{"location":"tutorials/static-gatsby-site/","text":"Gatsby is an open source, free, and easy to use static site builder. Gatsby uses React and helps you deploy your website or app as a progressive web app with the smallest amount of effort. Gatsby allows you to write your content in Markdown and then compile it to HTML with a command-line tool. When you compile your website, Gatsby will create a single folder containing your final website. This folder is what you'll want to add to a Textile Bucket. Here's how. Getting started \u00b6 The rest of this post assumes that you have a basic familiarity with Gatsby. If you don't, at a minimum, you'll need to complete the Gatsby Quickstart . You should now have a basic webpage setup with Gatsby. If you have run gatsby develop , you should be able to see your website at http://localhost:8000 . Building your website \u00b6 When you run your website on your computer, Gatsby will dynamically render HTML from the Markdown you write. When you are ready to publish your website to the world, you need to build your website. By default, Gatsby will build your site into a folder public . The content of public is what you'll want to publish to your Bucket. Publish your Bucket \u00b6 First, you'll need to login to Textile and initialize a Project in the root of your Gatsby folder. Download and install Textile CLI (see installation ). Init and login to Textile (see account intro ). CD into your Jekyll directory and initialize a Bucket with textile bucket init . Build your site with gatsby build . That's it! You can now view the content of your Bucket on the free domain, on the Gateway, or using IPNS.","title":"Static gatsby site"},{"location":"tutorials/static-gatsby-site/#getting-started","text":"The rest of this post assumes that you have a basic familiarity with Gatsby. If you don't, at a minimum, you'll need to complete the Gatsby Quickstart . You should now have a basic webpage setup with Gatsby. If you have run gatsby develop , you should be able to see your website at http://localhost:8000 .","title":"Getting started"},{"location":"tutorials/static-gatsby-site/#building-your-website","text":"When you run your website on your computer, Gatsby will dynamically render HTML from the Markdown you write. When you are ready to publish your website to the world, you need to build your website. By default, Gatsby will build your site into a folder public . The content of public is what you'll want to publish to your Bucket.","title":"Building your website"},{"location":"tutorials/static-gatsby-site/#publish-your-bucket","text":"First, you'll need to login to Textile and initialize a Project in the root of your Gatsby folder. Download and install Textile CLI (see installation ). Init and login to Textile (see account intro ). CD into your Jekyll directory and initialize a Bucket with textile bucket init . Build your site with gatsby build . That's it! You can now view the content of your Bucket on the free domain, on the Gateway, or using IPNS.","title":"Publish your Bucket"},{"location":"tutorials/static-hugo-site/","text":"Hugo is a static website development framework written in Go, meaning it's fast. In fact, Hugo claims to be the fastest framework for building websites. Like many of the popular static website frameworks, Hugo allows you to write your content in Markdown and then compile it to HTML with a command-line tool. When you compile your website, Hugo will create a single folder containing your final website. This folder is what you'll want to add to a Textile Bucket. Here's how. Getting started \u00b6 The rest of this post assumes that you have a basic familiarity with Hugo. If you don't, at a minimum, you'll need to complete the Hugo Quickstart tutorial. You should now have a basic webpage setup with Hugo. If you have run hugo server -D , you should be able to see your website at http://localhost:1313 . Building your website \u00b6 When you run your site on your computer, Hugo will dynamically render HTML from the Markdown you write. When you are ready to publish your website to the world, you need to build your website. By default, Hugo will build your site into a folder public . The content of public is what you'll want to publish to your Bucket. Publish your Bucket \u00b6 First, you'll need to login to Textile and initialize a Project in the root of your Hugo folder. Download and install Textile CLI (see installation ). Init and login to Textile (see account intro ). CD into your Jekyll directory and initialize a Bucket with textile bucket init . Build your site with hugo -D . Now, you are ready to push your Bucket. textile buckets push public/ . That's it! You can now view the content of your Bucket on the free domain, on the Gateway, or using IPNS.","title":"Static hugo site"},{"location":"tutorials/static-hugo-site/#getting-started","text":"The rest of this post assumes that you have a basic familiarity with Hugo. If you don't, at a minimum, you'll need to complete the Hugo Quickstart tutorial. You should now have a basic webpage setup with Hugo. If you have run hugo server -D , you should be able to see your website at http://localhost:1313 .","title":"Getting started"},{"location":"tutorials/static-hugo-site/#building-your-website","text":"When you run your site on your computer, Hugo will dynamically render HTML from the Markdown you write. When you are ready to publish your website to the world, you need to build your website. By default, Hugo will build your site into a folder public . The content of public is what you'll want to publish to your Bucket.","title":"Building your website"},{"location":"tutorials/static-hugo-site/#publish-your-bucket","text":"First, you'll need to login to Textile and initialize a Project in the root of your Hugo folder. Download and install Textile CLI (see installation ). Init and login to Textile (see account intro ). CD into your Jekyll directory and initialize a Bucket with textile bucket init . Build your site with hugo -D . Now, you are ready to push your Bucket. textile buckets push public/ . That's it! You can now view the content of your Bucket on the free domain, on the Gateway, or using IPNS.","title":"Publish your Bucket"},{"location":"tutorials/static-jekyll-site/","text":"Jekyll is one of the most popular static website building frameworks around. Bonus, Jekyll is also open-source and free. Jekyll allows you to write your content in Markdown and then compile it to HTML with a command-line tool. When you compile your website, Jekyll will create a single folder containing your final website. This folder is what you'll want to add to a Textile Bucket. Getting started \u00b6 The rest of this post assumes that you have a basic familiarity with Jekyll. If you don't, at a minimum, you'll need to complete the Jekyll Quickstart tutorial. You should now have a basic webpage setup with Jekyll. If you have run bundle exec jekyll serve , you should be able to see your website at http://localhost:4000 . Building your website \u00b6 When you run your Jekyll site on your computer, Jekyll will dynamically render HTML from the Markdown you write. When you are ready to publish your website to the world, you need to build your website. By default, Jekyll will build your site into a folder _site . The content of _site is what you'll want to publish to your Bucket. Publish your Bucket \u00b6 First, you'll need to login to Textile and initialize a Project in the root of your Jekyll folder. Download and install Textile CLI (see installation ). Init and login to Textile (see account intro ). CD into your Jekyll directory and initialize a Bucket with textile bucket init . Build your site with Jekyll build. Now, you are ready to push your Bucket. textile buckets push _site/ . That's it! You can now view the content of your Bucket on the free domain, on the Gateway, or using IPNS.","title":"Static jekyll site"},{"location":"tutorials/static-jekyll-site/#getting-started","text":"The rest of this post assumes that you have a basic familiarity with Jekyll. If you don't, at a minimum, you'll need to complete the Jekyll Quickstart tutorial. You should now have a basic webpage setup with Jekyll. If you have run bundle exec jekyll serve , you should be able to see your website at http://localhost:4000 .","title":"Getting started"},{"location":"tutorials/static-jekyll-site/#building-your-website","text":"When you run your Jekyll site on your computer, Jekyll will dynamically render HTML from the Markdown you write. When you are ready to publish your website to the world, you need to build your website. By default, Jekyll will build your site into a folder _site . The content of _site is what you'll want to publish to your Bucket.","title":"Building your website"},{"location":"tutorials/static-jekyll-site/#publish-your-bucket","text":"First, you'll need to login to Textile and initialize a Project in the root of your Jekyll folder. Download and install Textile CLI (see installation ). Init and login to Textile (see account intro ). CD into your Jekyll directory and initialize a Bucket with textile bucket init . Build your site with Jekyll build. Now, you are ready to push your Bucket. textile buckets push _site/ . That's it! You can now view the content of your Bucket on the free domain, on the Gateway, or using IPNS.","title":"Publish your Bucket"},{"location":"tutorials/static-websites/","text":"Buckets make it simple to publish websites using IPFS. If you are using a static site builder such as Jekyll , Gatsby , Hugo , or Mkdocs you can add Buckets to your build steps for both staging and production site hosting. Site builder tutorials \u00b6 If you are using one of these static site builders, jump to the specific tutorials. Jekyll Site An example Jekyll site published in a Bucket. Gatsby Site An example Gatsby site published in a Bucket. Hugo Site An example Hugo site published in a Bucket. Resources \u00b6 Domain Name Management \u00b6 Fleek Fleek offers domain management tools and soon, Bucket support. Cloudflare Easily add your Bucket IPNS address to Cloudflare with DNSLink. Network Replication \u00b6 Your website may be one of your most important assets on IPFS. Why not pin it on multiple infrastructure providers for added network speed. Pinata Simple and easy to use, Pinata offers a great pinning API for IPFS. Infura Seasoned builders of API portals for the dWeb, pin with confidence on Infura. Temporal Get the stopwatch out, Temporal is your pinning service with speed on the brain . Overview \u00b6 Initialize your Bucket \u00b6 If you are building a static site with an engine such as Jekyll or Gatsyb, or even React you will want to initialize your Bucket in the root of the project, not in the build folder. Your project might look like this. ls ./ build package.json src In this case, we are building the raw site code in src into the build folder. We should initialize the Bucket at the root of the project. tt bucket init Push your Bucket \u00b6 Now, pushing your Bucket is simple. After you build your project so that build contains the latest version of your site ready to deploy you run the bucket push command. tt bucket push build/ . That's it! Your site is now available on the free subdomain and over IPNS. You can easily integrate it into your own DNS using DNSLink. DNSLink \u00b6 You can use Buckets to host websites from your own domain using DNSLink . The easiest way to do this is using your Bucket's IPNS link. On Cloudflare for example, your updated DNS records should look like the following. CNAME <site> www.cloudflare-ipfs.com TXT _dnslink.<site> dnslink = /ipns/<bucket ipns link>","title":"Website Hosting"},{"location":"tutorials/static-websites/#site-builder-tutorials","text":"If you are using one of these static site builders, jump to the specific tutorials.","title":"Site builder tutorials"},{"location":"tutorials/static-websites/#resources","text":"","title":"Resources"},{"location":"tutorials/static-websites/#domain-name-management","text":"","title":"Domain Name Management"},{"location":"tutorials/static-websites/#network-replication","text":"Your website may be one of your most important assets on IPFS. Why not pin it on multiple infrastructure providers for added network speed.","title":"Network Replication"},{"location":"tutorials/static-websites/#overview","text":"","title":"Overview"},{"location":"tutorials/static-websites/#initialize-your-bucket","text":"If you are building a static site with an engine such as Jekyll or Gatsyb, or even React you will want to initialize your Bucket in the root of the project, not in the build folder. Your project might look like this. ls ./ build package.json src In this case, we are building the raw site code in src into the build folder. We should initialize the Bucket at the root of the project. tt bucket init","title":"Initialize your Bucket"},{"location":"tutorials/static-websites/#push-your-bucket","text":"Now, pushing your Bucket is simple. After you build your project so that build contains the latest version of your site ready to deploy you run the bucket push command. tt bucket push build/ . That's it! Your site is now available on the free subdomain and over IPNS. You can easily integrate it into your own DNS using DNSLink.","title":"Push your Bucket"},{"location":"tutorials/static-websites/#dnslink","text":"You can use Buckets to host websites from your own domain using DNSLink . The easiest way to do this is using your Bucket's IPNS link. On Cloudflare for example, your updated DNS records should look like the following. CNAME <site> www.cloudflare-ipfs.com TXT _dnslink.<site> dnslink = /ipns/<bucket ipns link>","title":"DNSLink"}]}